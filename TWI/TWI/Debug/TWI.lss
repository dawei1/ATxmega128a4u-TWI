
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00802000  00802000  00000612  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001d8  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003165  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007f4  00000000  00000000  0000412b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f1b  00000000  00000000  0000491f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f8  00000000  00000000  0000583c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000168f  00000000  00000000  00005c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ec4  00000000  00000000  000072c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  00008187  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
   6:	00 00       	nop
   8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
   e:	00 00       	nop
  10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
  16:	00 00       	nop
  18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
  1e:	00 00       	nop
  20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
  22:	00 00       	nop
  24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
  26:	00 00       	nop
  28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
  32:	00 00       	nop
  34:	d2 c1       	rjmp	.+932    	; 0x3da <__vector_13>
  36:	00 00       	nop
  38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
  42:	00 00       	nop
  44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
  46:	00 00       	nop
  48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
  4e:	00 00       	nop
  50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
  56:	00 00       	nop
  58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
  62:	00 00       	nop
  64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
  6e:	00 00       	nop
  70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
  72:	00 00       	nop
  74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
  76:	00 00       	nop
  78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
  82:	00 00       	nop
  84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
  86:	00 00       	nop
  88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
  92:	00 00       	nop
  94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
  96:	00 00       	nop
  98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
  fe:	00 00       	nop
 100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
 102:	00 00       	nop
 104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
 106:	00 00       	nop
 108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
 112:	00 00       	nop
 114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
 116:	00 00       	nop
 118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	85 c0       	rjmp	.+266    	; 0x228 <__bad_interrupt>
 11e:	00 00       	nop
 120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
 122:	00 00       	nop
 124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
 126:	00 00       	nop
 128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
 132:	00 00       	nop
 134:	79 c0       	rjmp	.+242    	; 0x228 <__bad_interrupt>
 136:	00 00       	nop
 138:	77 c0       	rjmp	.+238    	; 0x228 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	75 c0       	rjmp	.+234    	; 0x228 <__bad_interrupt>
 13e:	00 00       	nop
 140:	73 c0       	rjmp	.+230    	; 0x228 <__bad_interrupt>
 142:	00 00       	nop
 144:	71 c0       	rjmp	.+226    	; 0x228 <__bad_interrupt>
 146:	00 00       	nop
 148:	6f c0       	rjmp	.+222    	; 0x228 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
 152:	00 00       	nop
 154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
 156:	00 00       	nop
 158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
 15e:	00 00       	nop
 160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
 162:	00 00       	nop
 164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
 166:	00 00       	nop
 168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
 16e:	00 00       	nop
 170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
 172:	00 00       	nop
 174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
 176:	00 00       	nop
 178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
 17e:	00 00       	nop
 180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
 182:	00 00       	nop
 184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
 186:	00 00       	nop
 188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
 192:	00 00       	nop
 194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
 196:	00 00       	nop
 198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3b c0       	rjmp	.+118    	; 0x228 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	39 c0       	rjmp	.+114    	; 0x228 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	37 c0       	rjmp	.+110    	; 0x228 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	31 c0       	rjmp	.+98     	; 0x228 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2d c0       	rjmp	.+90     	; 0x228 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2b c0       	rjmp	.+86     	; 0x228 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	25 c0       	rjmp	.+74     	; 0x228 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	23 c0       	rjmp	.+70     	; 0x228 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	17 c0       	rjmp	.+46     	; 0x228 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a5 31       	cpi	r26, 0x15	; 21
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	7c d0       	rcall	.+248    	; 0x31e <main>
 226:	a9 c1       	rjmp	.+850    	; 0x57a <_exit>

00000228 <__bad_interrupt>:
 228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <TC0_ConfigClockSource>:
 22a:	fc 01       	movw	r30, r24
 22c:	20 81       	ld	r18, Z
 22e:	20 7f       	andi	r18, 0xF0	; 240
 230:	62 2b       	or	r22, r18
 232:	60 83       	st	Z, r22
 234:	08 95       	ret

00000236 <TC0_ConfigWGM>:
 236:	fc 01       	movw	r30, r24
 238:	21 81       	ldd	r18, Z+1	; 0x01
 23a:	28 7f       	andi	r18, 0xF8	; 248
 23c:	62 2b       	or	r22, r18
 23e:	61 83       	std	Z+1, r22	; 0x01
 240:	08 95       	ret

00000242 <TC0_EnableCCChannels>:
 242:	fc 01       	movw	r30, r24
 244:	21 81       	ldd	r18, Z+1	; 0x01
 246:	60 7f       	andi	r22, 0xF0	; 240
 248:	62 2b       	or	r22, r18
 24a:	61 83       	std	Z+1, r22	; 0x01
 24c:	08 95       	ret

0000024e <send_high_manchester>:
#define TIMER_PERIOD CPU_SPEED/AM_FREQUENCY
#define PULSE_COUNT  AM_FREQUENCY/(2*MANCHESTER_FREQUENCY)

void send_high_manchester ( ) {
	int c;
	TC_SetCompareA(&TCD0,0);
 24e:	e0 e0       	ldi	r30, 0x00	; 0
 250:	f9 e0       	ldi	r31, 0x09	; 9
 252:	10 ae       	std	Z+56, r1	; 0x38
 254:	11 ae       	std	Z+57, r1	; 0x39
 256:	8a e0       	ldi	r24, 0x0A	; 10
 258:	90 e0       	ldi	r25, 0x00	; 0
	for (c=0; PULSE_COUNT > c ;++c) {
		TC_ClearOverflowFlag(&TCD0);
 25a:	31 e0       	ldi	r19, 0x01	; 1
 25c:	34 87       	std	Z+12, r19	; 0x0c
		while(TC_GetOverflowFlag(&TCD0) == 0);
 25e:	24 85       	ldd	r18, Z+12	; 0x0c
 260:	20 ff       	sbrs	r18, 0
 262:	fd cf       	rjmp	.-6      	; 0x25e <send_high_manchester+0x10>
 264:	01 97       	sbiw	r24, 0x01	; 1
#define PULSE_COUNT  AM_FREQUENCY/(2*MANCHESTER_FREQUENCY)

void send_high_manchester ( ) {
	int c;
	TC_SetCompareA(&TCD0,0);
	for (c=0; PULSE_COUNT > c ;++c) {
 266:	d1 f7       	brne	.-12     	; 0x25c <send_high_manchester+0xe>
		TC_ClearOverflowFlag(&TCD0);
		while(TC_GetOverflowFlag(&TCD0) == 0);
	}
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
 268:	82 e3       	ldi	r24, 0x32	; 50
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	e0 e0       	ldi	r30, 0x00	; 0
 26e:	f9 e0       	ldi	r31, 0x09	; 9
 270:	80 af       	std	Z+56, r24	; 0x38
 272:	91 af       	std	Z+57, r25	; 0x39
 274:	8a e0       	ldi	r24, 0x0A	; 10
 276:	90 e0       	ldi	r25, 0x00	; 0
	for (c=0; PULSE_COUNT > c ;++c) {
		TC_ClearOverflowFlag(&TCD0);
 278:	31 e0       	ldi	r19, 0x01	; 1
 27a:	34 87       	std	Z+12, r19	; 0x0c
		while(TC_GetOverflowFlag(&TCD0) == 0);
 27c:	24 85       	ldd	r18, Z+12	; 0x0c
 27e:	20 ff       	sbrs	r18, 0
 280:	fd cf       	rjmp	.-6      	; 0x27c <send_high_manchester+0x2e>
 282:	01 97       	sbiw	r24, 0x01	; 1
	for (c=0; PULSE_COUNT > c ;++c) {
		TC_ClearOverflowFlag(&TCD0);
		while(TC_GetOverflowFlag(&TCD0) == 0);
	}
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
	for (c=0; PULSE_COUNT > c ;++c) {
 284:	d1 f7       	brne	.-12     	; 0x27a <send_high_manchester+0x2c>
		TC_ClearOverflowFlag(&TCD0);
		while(TC_GetOverflowFlag(&TCD0) == 0);
	}
	TC_ClearOverflowFlag(&TCD0);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	e0 e0       	ldi	r30, 0x00	; 0
 28a:	f9 e0       	ldi	r31, 0x09	; 9
 28c:	84 87       	std	Z+12, r24	; 0x0c
 28e:	08 95       	ret

00000290 <send_low_manchester>:
}

void send_low_manchester ( ) {
	int c;
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
 290:	82 e3       	ldi	r24, 0x32	; 50
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	e0 e0       	ldi	r30, 0x00	; 0
 296:	f9 e0       	ldi	r31, 0x09	; 9
 298:	80 af       	std	Z+56, r24	; 0x38
 29a:	91 af       	std	Z+57, r25	; 0x39
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	90 e0       	ldi	r25, 0x00	; 0
	for (c=0; PULSE_COUNT > c ;++c) {
		TC_ClearOverflowFlag(&TCD0);
 2a0:	31 e0       	ldi	r19, 0x01	; 1
 2a2:	34 87       	std	Z+12, r19	; 0x0c
		while(TC_GetOverflowFlag(&TCD0) == 0);
 2a4:	24 85       	ldd	r18, Z+12	; 0x0c
 2a6:	20 ff       	sbrs	r18, 0
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <send_low_manchester+0x14>
 2aa:	01 97       	sbiw	r24, 0x01	; 1
}

void send_low_manchester ( ) {
	int c;
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
	for (c=0; PULSE_COUNT > c ;++c) {
 2ac:	d1 f7       	brne	.-12     	; 0x2a2 <send_low_manchester+0x12>
		TC_ClearOverflowFlag(&TCD0);
		while(TC_GetOverflowFlag(&TCD0) == 0);
	}
	TC_SetCompareA(&TCD0,0);
 2ae:	e0 e0       	ldi	r30, 0x00	; 0
 2b0:	f9 e0       	ldi	r31, 0x09	; 9
 2b2:	10 ae       	std	Z+56, r1	; 0x38
 2b4:	11 ae       	std	Z+57, r1	; 0x39
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	90 e0       	ldi	r25, 0x00	; 0
	for (c=0; PULSE_COUNT > c ;++c) {
		TC_ClearOverflowFlag(&TCD0);
 2ba:	31 e0       	ldi	r19, 0x01	; 1
 2bc:	34 87       	std	Z+12, r19	; 0x0c
		while(TC_GetOverflowFlag(&TCD0) == 0);
 2be:	24 85       	ldd	r18, Z+12	; 0x0c
 2c0:	20 ff       	sbrs	r18, 0
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <send_low_manchester+0x2e>
 2c4:	01 97       	sbiw	r24, 0x01	; 1
	for (c=0; PULSE_COUNT > c ;++c) {
		TC_ClearOverflowFlag(&TCD0);
		while(TC_GetOverflowFlag(&TCD0) == 0);
	}
	TC_SetCompareA(&TCD0,0);
	for (c=0; PULSE_COUNT > c ;++c) {
 2c6:	d1 f7       	brne	.-12     	; 0x2bc <send_low_manchester+0x2c>
		TC_ClearOverflowFlag(&TCD0);
		while(TC_GetOverflowFlag(&TCD0) == 0);
	}
	TC_ClearOverflowFlag(&TCD0);
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	e0 e0       	ldi	r30, 0x00	; 0
 2cc:	f9 e0       	ldi	r31, 0x09	; 9
 2ce:	84 87       	std	Z+12, r24	; 0x0c
 2d0:	08 95       	ret

000002d2 <send_byte_manchester>:
}

void send_byte_manchester ( const unsigned char bits ) {
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
		if (bits & (mask << i)) send_high_manchester();
 2e2:	ee 24       	eor	r14, r14
 2e4:	e3 94       	inc	r14
 2e6:	f1 2c       	mov	r15, r1
 2e8:	08 2f       	mov	r16, r24
 2ea:	10 e0       	ldi	r17, 0x00	; 0
 2ec:	97 01       	movw	r18, r14
 2ee:	0c 2e       	mov	r0, r28
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <send_byte_manchester+0x24>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <send_byte_manchester+0x20>
 2fa:	20 23       	and	r18, r16
 2fc:	31 23       	and	r19, r17
 2fe:	23 2b       	or	r18, r19
 300:	11 f0       	breq	.+4      	; 0x306 <send_byte_manchester+0x34>
 302:	a5 df       	rcall	.-182    	; 0x24e <send_high_manchester>
 304:	01 c0       	rjmp	.+2      	; 0x308 <send_byte_manchester+0x36>
		else send_low_manchester();
 306:	c4 df       	rcall	.-120    	; 0x290 <send_low_manchester>
}

void send_byte_manchester ( const unsigned char bits ) {
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 308:	21 96       	adiw	r28, 0x01	; 1
 30a:	c8 30       	cpi	r28, 0x08	; 8
 30c:	d1 05       	cpc	r29, r1
 30e:	71 f7       	brne	.-36     	; 0x2ec <send_byte_manchester+0x1a>
		if (bits & (mask << i)) send_high_manchester();
		else send_low_manchester();
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	08 95       	ret

0000031e <main>:

int main(void){
	
	// Use the internal pull-up resistors on PORTC's TWI Ports.
	// Comment out the two lines below if you want to use your own pull-up resistors (I recommend using 4.7k).
	PORTCFG.MPCMASK = 0x03; // Configure several PINxCTRL registers at the same time.
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	80 93 b0 00 	sts	0x00B0, r24
	PORTC.PIN0CTRL = (PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc; // Enable pull-ups.
 324:	e0 e4       	ldi	r30, 0x40	; 64
 326:	f6 e0       	ldi	r31, 0x06	; 6
 328:	80 89       	ldd	r24, Z+16	; 0x10
 32a:	87 7c       	andi	r24, 0xC7	; 199
 32c:	88 61       	ori	r24, 0x18	; 24
 32e:	80 8b       	std	Z+16, r24	; 0x10

//////////////////////////////////////////////////////////////80
	TWI_MasterInit(
 330:	25 e0       	ldi	r18, 0x05	; 5
 332:	40 e4       	ldi	r20, 0x40	; 64
 334:	60 e8       	ldi	r22, 0x80	; 128
 336:	74 e0       	ldi	r23, 0x04	; 4
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e2       	ldi	r25, 0x20	; 32
 33c:	82 d0       	rcall	.+260    	; 0x442 <TWI_MasterInit>
		TWI_MASTER_INTLVL_LO_gc,
		TWI_BAUDSETTING
	);

	/* Enable LO interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 33e:	e0 ea       	ldi	r30, 0xA0	; 160
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	82 81       	ldd	r24, Z+2	; 0x02
 344:	81 60       	ori	r24, 0x01	; 1
 346:	82 83       	std	Z+2, r24	; 0x02
	sei();  // Enable interrupts.
 348:	78 94       	sei
	
	PORTD.DIR = 0x01;  // Enable output on PortD0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 60 06 	sts	0x0660, r24
	
	TC0_ConfigWGM(&TCD0,TC_WGMODE_SS_gc);                       // Configure single slope mode.
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	99 e0       	ldi	r25, 0x09	; 9
 356:	6f df       	rcall	.-290    	; 0x236 <TC0_ConfigWGM>
	TC0_EnableCCChannels(&TCD0,TC0_CCAEN_bm);                   // Enable compare channel A.
 358:	60 e1       	ldi	r22, 0x10	; 16
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	99 e0       	ldi	r25, 0x09	; 9
 35e:	71 df       	rcall	.-286    	; 0x242 <TC0_EnableCCChannels>
	TC0_ConfigClockSource(&TCD0,TC_CLKSEL_DIV1_gc);             // Start the timer by setting a clock source.
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	99 e0       	ldi	r25, 0x09	; 9
 366:	61 df       	rcall	.-318    	; 0x22a <TC0_ConfigClockSource>
	
	TC_SetPeriod(&TCD0,TIMER_PERIOD);
 368:	e0 e0       	ldi	r30, 0x00	; 0
 36a:	f9 e0       	ldi	r31, 0x09	; 9
 36c:	84 e6       	ldi	r24, 0x64	; 100
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	86 a3       	std	Z+38, r24	; 0x26
 372:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
 374:	82 e3       	ldi	r24, 0x32	; 50
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	80 af       	std	Z+56, r24	; 0x38
 37a:	91 af       	std	Z+57, r25	; 0x39
	 
	/* This block is for testing only! */
	//while (1) send_low_manchester();
	twiMaster.readData[0] = 0xDE;
 37c:	8e ed       	ldi	r24, 0xDE	; 222
 37e:	80 93 0b 20 	sts	0x200B, r24
	twiMaster.readData[1] = 0xAD;
 382:	8d ea       	ldi	r24, 0xAD	; 173
 384:	80 93 0c 20 	sts	0x200C, r24
	twiMaster.readData[2] = 0xBE;
 388:	8e eb       	ldi	r24, 0xBE	; 190
 38a:	80 93 0d 20 	sts	0x200D, r24
	twiMaster.readData[3] = 0xEF;
 38e:	8f ee       	ldi	r24, 0xEF	; 239
 390:	80 93 0e 20 	sts	0x200E, r24
	/**/
	
	while (1) {
		int j;
		for (j=0; PULSE_COUNT > j ;++j) {
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
			int c;
			TC_SetCompareA(&TCD0,0);
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d9 e0       	ldi	r29, 0x09	; 9
			for (c=0; PULSE_COUNT > c ;++c) {
				TC_ClearOverflowFlag(&TCD0);
 39c:	ff 24       	eor	r15, r15
 39e:	f3 94       	inc	r15
 3a0:	0c c0       	rjmp	.+24     	; 0x3ba <main+0x9c>
	
	while (1) {
		int j;
		for (j=0; PULSE_COUNT > j ;++j) {
			int c;
			TC_SetCompareA(&TCD0,0);
 3a2:	18 ae       	std	Y+56, r1	; 0x38
 3a4:	19 ae       	std	Y+57, r1	; 0x39
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	90 e0       	ldi	r25, 0x00	; 0
			for (c=0; PULSE_COUNT > c ;++c) {
				TC_ClearOverflowFlag(&TCD0);
 3aa:	fc 86       	std	Y+12, r15	; 0x0c
				while(TC_GetOverflowFlag(&TCD0) == 0);
 3ac:	4c 85       	ldd	r20, Y+12	; 0x0c
 3ae:	40 ff       	sbrs	r20, 0
 3b0:	fd cf       	rjmp	.-6      	; 0x3ac <main+0x8e>
 3b2:	01 97       	sbiw	r24, 0x01	; 1
	while (1) {
		int j;
		for (j=0; PULSE_COUNT > j ;++j) {
			int c;
			TC_SetCompareA(&TCD0,0);
			for (c=0; PULSE_COUNT > c ;++c) {
 3b4:	d1 f7       	brne	.-12     	; 0x3aa <main+0x8c>
	twiMaster.readData[3] = 0xEF;
	/**/
	
	while (1) {
		int j;
		for (j=0; PULSE_COUNT > j ;++j) {
 3b6:	2f 5f       	subi	r18, 0xFF	; 255
 3b8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ba:	2a 30       	cpi	r18, 0x0A	; 10
 3bc:	31 05       	cpc	r19, r1
 3be:	8c f3       	brlt	.-30     	; 0x3a2 <main+0x84>
 3c0:	03 e0       	ldi	r16, 0x03	; 3
 3c2:	10 e0       	ldi	r17, 0x00	; 0
		);                                                      // Begin a TWI transaction.
		while (twiMaster.status != TWIM_STATUS_READY);          // Wait until the transaction completes.
		*/
		int i;
		for (i=TWIM_READ_BUFFER_SIZE-1; 0 <= i ;--i) {            // Iterate through the results.
			send_byte_manchester(twiMaster.readData[i]);        // Send the data using Manchester encoding.
 3c4:	f8 01       	movw	r30, r16
 3c6:	e0 50       	subi	r30, 0x00	; 0
 3c8:	f0 4e       	sbci	r31, 0xE0	; 224
 3ca:	83 85       	ldd	r24, Z+11	; 0x0b
 3cc:	82 df       	rcall	.-252    	; 0x2d2 <send_byte_manchester>
			TWIM_READ_BUFFER_SIZE
		);                                                      // Begin a TWI transaction.
		while (twiMaster.status != TWIM_STATUS_READY);          // Wait until the transaction completes.
		*/
		int i;
		for (i=TWIM_READ_BUFFER_SIZE-1; 0 <= i ;--i) {            // Iterate through the results.
 3ce:	01 50       	subi	r16, 0x01	; 1
 3d0:	11 09       	sbc	r17, r1
 3d2:	c0 f7       	brcc	.-16     	; 0x3c4 <main+0xa6>
	twiMaster.readData[3] = 0xEF;
	/**/
	
	while (1) {
		int j;
		for (j=0; PULSE_COUNT > j ;++j) {
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	f0 cf       	rjmp	.-32     	; 0x3ba <main+0x9c>

000003da <__vector_13>:
		}
	}
}

/*! TWIC Master Interrupt vector. */
ISR(TWIC_TWIM_vect){
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	08 b6       	in	r0, 0x38	; 56
 3e6:	0f 92       	push	r0
 3e8:	18 be       	out	0x38, r1	; 56
 3ea:	09 b6       	in	r0, 0x39	; 57
 3ec:	0f 92       	push	r0
 3ee:	19 be       	out	0x39, r1	; 57
 3f0:	0b b6       	in	r0, 0x3b	; 59
 3f2:	0f 92       	push	r0
 3f4:	1b be       	out	0x3b, r1	; 59
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e2       	ldi	r25, 0x20	; 32
 412:	a3 d0       	rcall	.+326    	; 0x55a <TWI_MasterInterruptHandler>
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	0b be       	out	0x3b, r0	; 59
 430:	0f 90       	pop	r0
 432:	09 be       	out	0x39, r0	; 57
 434:	0f 90       	pop	r0
 436:	08 be       	out	0x38, r0	; 56
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <TWI_MasterInit>:
 442:	fc 01       	movw	r30, r24
 444:	60 83       	st	Z, r22
 446:	71 83       	std	Z+1, r23	; 0x01
 448:	48 63       	ori	r20, 0x38	; 56
 44a:	db 01       	movw	r26, r22
 44c:	11 96       	adiw	r26, 0x01	; 1
 44e:	4c 93       	st	X, r20
 450:	a0 81       	ld	r26, Z
 452:	b1 81       	ldd	r27, Z+1	; 0x01
 454:	15 96       	adiw	r26, 0x05	; 5
 456:	2c 93       	st	X, r18
 458:	01 90       	ld	r0, Z+
 45a:	f0 81       	ld	r31, Z
 45c:	e0 2d       	mov	r30, r0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	84 83       	std	Z+4, r24	; 0x04
 462:	08 95       	ret

00000464 <TWI_MasterArbitrationLostBusErrorHandler>:
 464:	fc 01       	movw	r30, r24
 466:	a0 81       	ld	r26, Z
 468:	b1 81       	ldd	r27, Z+1	; 0x01
 46a:	14 96       	adiw	r26, 0x04	; 4
 46c:	8c 91       	ld	r24, X
 46e:	14 97       	sbiw	r26, 0x04	; 4
 470:	82 ff       	sbrs	r24, 2
 472:	03 c0       	rjmp	.+6      	; 0x47a <TWI_MasterArbitrationLostBusErrorHandler+0x16>
 474:	94 e0       	ldi	r25, 0x04	; 4
 476:	94 8b       	std	Z+20, r25	; 0x14
 478:	02 c0       	rjmp	.+4      	; 0x47e <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
 47a:	93 e0       	ldi	r25, 0x03	; 3
 47c:	94 8b       	std	Z+20, r25	; 0x14
 47e:	88 60       	ori	r24, 0x08	; 8
 480:	14 96       	adiw	r26, 0x04	; 4
 482:	8c 93       	st	X, r24
 484:	13 8a       	std	Z+19, r1	; 0x13
 486:	08 95       	ret

00000488 <TWI_MasterTransactionFinished>:
 488:	fc 01       	movw	r30, r24
 48a:	64 8b       	std	Z+20, r22	; 0x14
 48c:	13 8a       	std	Z+19, r1	; 0x13
 48e:	08 95       	ret

00000490 <TWI_MasterReadHandler>:
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	ec 01       	movw	r28, r24
 496:	8a 89       	ldd	r24, Y+18	; 0x12
 498:	84 30       	cpi	r24, 0x04	; 4
 49a:	98 f4       	brcc	.+38     	; 0x4c2 <TWI_MasterReadHandler+0x32>
 49c:	e0 e4       	ldi	r30, 0x40	; 64
 49e:	f6 e0       	ldi	r31, 0x06	; 6
 4a0:	80 81       	ld	r24, Z
 4a2:	10 82       	st	Z, r1
 4a4:	a8 81       	ld	r26, Y
 4a6:	b9 81       	ldd	r27, Y+1	; 0x01
 4a8:	17 96       	adiw	r26, 0x07	; 7
 4aa:	9c 91       	ld	r25, X
 4ac:	2a 89       	ldd	r18, Y+18	; 0x12
 4ae:	de 01       	movw	r26, r28
 4b0:	a2 0f       	add	r26, r18
 4b2:	b1 1d       	adc	r27, r1
 4b4:	1b 96       	adiw	r26, 0x0b	; 11
 4b6:	9c 93       	st	X, r25
 4b8:	9a 89       	ldd	r25, Y+18	; 0x12
 4ba:	9f 5f       	subi	r25, 0xFF	; 255
 4bc:	9a 8b       	std	Y+18, r25	; 0x12
 4be:	80 83       	st	Z, r24
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <TWI_MasterReadHandler+0x40>
 4c2:	e8 81       	ld	r30, Y
 4c4:	f9 81       	ldd	r31, Y+1	; 0x01
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	83 83       	std	Z+3, r24	; 0x03
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	ce 01       	movw	r24, r28
 4ce:	dc df       	rcall	.-72     	; 0x488 <TWI_MasterTransactionFinished>
 4d0:	98 89       	ldd	r25, Y+16	; 0x10
 4d2:	8a 89       	ldd	r24, Y+18	; 0x12
 4d4:	89 17       	cp	r24, r25
 4d6:	28 f4       	brcc	.+10     	; 0x4e2 <TWI_MasterReadHandler+0x52>
 4d8:	e8 81       	ld	r30, Y
 4da:	f9 81       	ldd	r31, Y+1	; 0x01
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	83 83       	std	Z+3, r24	; 0x03
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <TWI_MasterReadHandler+0x60>
 4e2:	e8 81       	ld	r30, Y
 4e4:	f9 81       	ldd	r31, Y+1	; 0x01
 4e6:	87 e0       	ldi	r24, 0x07	; 7
 4e8:	83 83       	std	Z+3, r24	; 0x03
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	ce 01       	movw	r24, r28
 4ee:	cc df       	rcall	.-104    	; 0x488 <TWI_MasterTransactionFinished>
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <TWI_MasterWriteHandler>:
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	fc 01       	movw	r30, r24
 4fc:	97 85       	ldd	r25, Z+15	; 0x0f
 4fe:	20 89       	ldd	r18, Z+16	; 0x10
 500:	a0 81       	ld	r26, Z
 502:	b1 81       	ldd	r27, Z+1	; 0x01
 504:	14 96       	adiw	r26, 0x04	; 4
 506:	8c 91       	ld	r24, X
 508:	14 97       	sbiw	r26, 0x04	; 4
 50a:	84 ff       	sbrs	r24, 4
 50c:	07 c0       	rjmp	.+14     	; 0x51c <TWI_MasterWriteHandler+0x26>
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	13 96       	adiw	r26, 0x03	; 3
 512:	8c 93       	st	X, r24
 514:	85 e0       	ldi	r24, 0x05	; 5
 516:	84 8b       	std	Z+20, r24	; 0x14
 518:	13 8a       	std	Z+19, r1	; 0x13
 51a:	1c c0       	rjmp	.+56     	; 0x554 <TWI_MasterWriteHandler+0x5e>
 51c:	81 89       	ldd	r24, Z+17	; 0x11
 51e:	89 17       	cp	r24, r25
 520:	58 f4       	brcc	.+22     	; 0x538 <TWI_MasterWriteHandler+0x42>
 522:	81 89       	ldd	r24, Z+17	; 0x11
 524:	ef 01       	movw	r28, r30
 526:	c8 0f       	add	r28, r24
 528:	d1 1d       	adc	r29, r1
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	17 96       	adiw	r26, 0x07	; 7
 52e:	8c 93       	st	X, r24
 530:	81 89       	ldd	r24, Z+17	; 0x11
 532:	8f 5f       	subi	r24, 0xFF	; 255
 534:	81 8b       	std	Z+17, r24	; 0x11
 536:	0e c0       	rjmp	.+28     	; 0x554 <TWI_MasterWriteHandler+0x5e>
 538:	82 89       	ldd	r24, Z+18	; 0x12
 53a:	82 17       	cp	r24, r18
 53c:	28 f4       	brcc	.+10     	; 0x548 <TWI_MasterWriteHandler+0x52>
 53e:	82 81       	ldd	r24, Z+2	; 0x02
 540:	81 60       	ori	r24, 0x01	; 1
 542:	16 96       	adiw	r26, 0x06	; 6
 544:	8c 93       	st	X, r24
 546:	06 c0       	rjmp	.+12     	; 0x554 <TWI_MasterWriteHandler+0x5e>
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	13 96       	adiw	r26, 0x03	; 3
 54c:	8c 93       	st	X, r24
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	cf 01       	movw	r24, r30
 552:	9a df       	rcall	.-204    	; 0x488 <TWI_MasterTransactionFinished>
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <TWI_MasterInterruptHandler>:
 55a:	dc 01       	movw	r26, r24
 55c:	ed 91       	ld	r30, X+
 55e:	fc 91       	ld	r31, X
 560:	24 81       	ldd	r18, Z+4	; 0x04
 562:	32 2f       	mov	r19, r18
 564:	3c 70       	andi	r19, 0x0C	; 12
 566:	09 f0       	breq	.+2      	; 0x56a <TWI_MasterInterruptHandler+0x10>
 568:	7d cf       	rjmp	.-262    	; 0x464 <TWI_MasterArbitrationLostBusErrorHandler>
 56a:	26 ff       	sbrs	r18, 6
 56c:	01 c0       	rjmp	.+2      	; 0x570 <TWI_MasterInterruptHandler+0x16>
 56e:	c3 cf       	rjmp	.-122    	; 0x4f6 <TWI_MasterWriteHandler>
 570:	22 23       	and	r18, r18
 572:	0c f4       	brge	.+2      	; 0x576 <TWI_MasterInterruptHandler+0x1c>
 574:	8d cf       	rjmp	.-230    	; 0x490 <TWI_MasterReadHandler>
 576:	66 e0       	ldi	r22, 0x06	; 6
 578:	87 cf       	rjmp	.-242    	; 0x488 <TWI_MasterTransactionFinished>

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>

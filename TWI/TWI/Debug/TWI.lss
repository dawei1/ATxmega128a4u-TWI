
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  0000058c  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00802000  00802000  00000620  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000dcb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c0  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031f2  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000083b  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f30  00000000  00000000  000049e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a8  00000000  00000000  00005918  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016a6  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e82  00000000  00000000  00007366  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000180  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
   6:	00 00       	nop
   8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
   e:	00 00       	nop
  10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
  16:	00 00       	nop
  18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
  1e:	00 00       	nop
  20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
  22:	00 00       	nop
  24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
  26:	00 00       	nop
  28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
  32:	00 00       	nop
  34:	8d c1       	rjmp	.+794    	; 0x350 <__vector_13>
  36:	00 00       	nop
  38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
  42:	00 00       	nop
  44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
  46:	00 00       	nop
  48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
  4e:	00 00       	nop
  50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
  56:	00 00       	nop
  58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
  62:	00 00       	nop
  64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
  6e:	00 00       	nop
  70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
  72:	00 00       	nop
  74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
  76:	00 00       	nop
  78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
  82:	00 00       	nop
  84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
  86:	00 00       	nop
  88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
  92:	00 00       	nop
  94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
  96:	00 00       	nop
  98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
  fe:	00 00       	nop
 100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
 102:	00 00       	nop
 104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
 106:	00 00       	nop
 108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
 112:	00 00       	nop
 114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
 116:	00 00       	nop
 118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	85 c0       	rjmp	.+266    	; 0x228 <__bad_interrupt>
 11e:	00 00       	nop
 120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
 122:	00 00       	nop
 124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
 126:	00 00       	nop
 128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
 132:	00 00       	nop
 134:	79 c0       	rjmp	.+242    	; 0x228 <__bad_interrupt>
 136:	00 00       	nop
 138:	77 c0       	rjmp	.+238    	; 0x228 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	75 c0       	rjmp	.+234    	; 0x228 <__bad_interrupt>
 13e:	00 00       	nop
 140:	73 c0       	rjmp	.+230    	; 0x228 <__bad_interrupt>
 142:	00 00       	nop
 144:	71 c0       	rjmp	.+226    	; 0x228 <__bad_interrupt>
 146:	00 00       	nop
 148:	6f c0       	rjmp	.+222    	; 0x228 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
 152:	00 00       	nop
 154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
 156:	00 00       	nop
 158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
 15e:	00 00       	nop
 160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
 162:	00 00       	nop
 164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
 166:	00 00       	nop
 168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
 16e:	00 00       	nop
 170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
 172:	00 00       	nop
 174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
 176:	00 00       	nop
 178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
 17e:	00 00       	nop
 180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
 182:	00 00       	nop
 184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
 186:	00 00       	nop
 188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
 192:	00 00       	nop
 194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
 196:	00 00       	nop
 198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3b c0       	rjmp	.+118    	; 0x228 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	39 c0       	rjmp	.+114    	; 0x228 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	37 c0       	rjmp	.+110    	; 0x228 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	31 c0       	rjmp	.+98     	; 0x228 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2d c0       	rjmp	.+90     	; 0x228 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2b c0       	rjmp	.+86     	; 0x228 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	25 c0       	rjmp	.+74     	; 0x228 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	23 c0       	rjmp	.+70     	; 0x228 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	17 c0       	rjmp	.+46     	; 0x228 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a5 31       	cpi	r26, 0x15	; 21
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	14 d0       	rcall	.+40     	; 0x24e <main>
 226:	b0 c1       	rjmp	.+864    	; 0x588 <_exit>

00000228 <__bad_interrupt>:
 228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <TC0_ConfigClockSource>:
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC1_ConfigInputCapture( volatile TC1_t * tc, TC_EVSEL_t eventSource )
{
	tc->CTRLD = ( tc->CTRLD & ~( TC1_EVSEL_gm | TC1_EVACT_gm ) ) |
 22a:	fc 01       	movw	r30, r24
 22c:	20 81       	ld	r18, Z
 22e:	20 7f       	andi	r18, 0xF0	; 240
 230:	62 2b       	or	r22, r18
 232:	60 83       	st	Z, r22
 234:	08 95       	ret

00000236 <TC0_ConfigWGM>:
 236:	fc 01       	movw	r30, r24
 238:	21 81       	ldd	r18, Z+1	; 0x01
 23a:	28 7f       	andi	r18, 0xF8	; 248
 23c:	62 2b       	or	r22, r18
 23e:	61 83       	std	Z+1, r22	; 0x01
 240:	08 95       	ret

00000242 <TC0_EnableCCChannels>:
{
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
 242:	fc 01       	movw	r30, r24
 244:	21 81       	ldd	r18, Z+1	; 0x01
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
 246:	60 7f       	andi	r22, 0xF0	; 240

	/* Enable channels. */
	tc->CTRLB |= enableMask;
 248:	62 2b       	or	r22, r18
 24a:	61 83       	std	Z+1, r22	; 0x01
 24c:	08 95       	ret

0000024e <main>:
//uint8_t sendBuffer[NUM_BYTES] = {0xCA, 0xFE, 0xBA, 0xBE}; // <--- for future communication with iPhone


int main(void){
	
	PORTA_DIR = 0xFF; // Set PORTA to be an output for LEDS
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	80 93 00 06 	sts	0x0600, r24

	// Use the internal pullup resistors on PORTC's TWI Ports
	// Comment out the two lines below if you want to use your own pullup resistors (I recommend using 4.7k)
	PORTCFG.MPCMASK = 0x03; // Configure several PINxCTRL registers at the same time
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	80 93 b0 00 	sts	0x00B0, r24
	PORTC.PIN0CTRL = (PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc; //Enable pull-up 
 25a:	e0 e4       	ldi	r30, 0x40	; 64
 25c:	f6 e0       	ldi	r31, 0x06	; 6
 25e:	80 89       	ldd	r24, Z+16	; 0x10
 260:	87 7c       	andi	r24, 0xC7	; 199
 262:	88 61       	ori	r24, 0x18	; 24
 264:	80 8b       	std	Z+16, r24	; 0x10

	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
 266:	25 e0       	ldi	r18, 0x05	; 5
 268:	40 e4       	ldi	r20, 0x40	; 64
 26a:	60 e8       	ldi	r22, 0x80	; 128
 26c:	74 e0       	ldi	r23, 0x04	; 4
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e2       	ldi	r25, 0x20	; 32
 272:	a2 d0       	rcall	.+324    	; 0x3b8 <TWI_MasterInit>
	               &TWIC,
	               TWI_MASTER_INTLVL_LO_gc,
	               TWI_BAUDSETTING);

	/* Enable LO interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm; // PMIC controls the handling and prioritizing of interrupt requests
 274:	e0 ea       	ldi	r30, 0xA0	; 160
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	82 81       	ldd	r24, Z+2	; 0x02
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	82 83       	std	Z+2, r24	; 0x02
	sei(); // enables interrupts
 27e:	78 94       	sei

	// Read 4 bytes of data from the I2C slave, (Chip Cap 2)
	TWI_MasterRead(&twiMaster, SLAVE_ADDRESS, 4);
 280:	44 e0       	ldi	r20, 0x04	; 4
 282:	68 e2       	ldi	r22, 0x28	; 40
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e2       	ldi	r25, 0x20	; 32
 288:	ec d0       	rcall	.+472    	; 0x462 <TWI_MasterRead>
	while (twiMaster.status != TWIM_STATUS_READY) {}; // Wait until transaction is complete.
 28a:	e3 e1       	ldi	r30, 0x13	; 19
 28c:	f0 e2       	ldi	r31, 0x20	; 32
 28e:	80 81       	ld	r24, Z
 290:	81 11       	cpse	r24, r1
 292:	fd cf       	rjmp	.-6      	; 0x28e <main+0x40>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
			
	// Iterate through the bytes received, display the received data on the LEDS
	int i = 0;
	for (i=0; i!=4; i++){
		PORTA_OUT = twiMaster.readData[i];
 298:	e4 e0       	ldi	r30, 0x04	; 4
 29a:	f6 e0       	ldi	r31, 0x06	; 6
 29c:	dc 01       	movw	r26, r24
 29e:	a0 50       	subi	r26, 0x00	; 0
 2a0:	b0 4e       	sbci	r27, 0xE0	; 224
 2a2:	1b 96       	adiw	r26, 0x0b	; 11
 2a4:	2c 91       	ld	r18, X
 2a6:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	2f e3       	ldi	r18, 0x3F	; 63
 2aa:	3d e0       	ldi	r19, 0x0D	; 13
 2ac:	43 e0       	ldi	r20, 0x03	; 3
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	30 40       	sbci	r19, 0x00	; 0
 2b2:	40 40       	sbci	r20, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x60>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x6a>
 2b8:	00 00       	nop
		_delay_ms(500);
		PORTA_OUT = 0x00;
 2ba:	10 82       	st	Z, r1
 2bc:	6f e3       	ldi	r22, 0x3F	; 63
 2be:	2d e0       	ldi	r18, 0x0D	; 13
 2c0:	33 e0       	ldi	r19, 0x03	; 3
 2c2:	61 50       	subi	r22, 0x01	; 1
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	30 40       	sbci	r19, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0x74>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x7e>
 2cc:	00 00       	nop
	TWI_MasterRead(&twiMaster, SLAVE_ADDRESS, 4);
	while (twiMaster.status != TWIM_STATUS_READY) {}; // Wait until transaction is complete.
			
	// Iterate through the bytes received, display the received data on the LEDS
	int i = 0;
	for (i=0; i!=4; i++){
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	84 30       	cpi	r24, 0x04	; 4
 2d2:	91 05       	cpc	r25, r1
 2d4:	19 f7       	brne	.-58     	; 0x29c <main+0x4e>
	uint16_t desiredFrequency = 20; // how many Kilo Hertz dost thou desire?
	uint16_t periodValue = baseFrequency/desiredFrequency; // period value for PWM
	uint16_t compareValue = periodValue/2; // compare value for PWM
	
	// Enable output on PortD0
	PORTD.DIR = 0x01;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 60 06 	sts	0x0660, r24
	/* Set the TC period. */
	//TC_SetPeriod( &TCD0, 0x0002 );
	//TC_SetCompareA( &TCD0, 0x0001 );
	
	periodValue = 101;
	TC_SetPeriod( &TCD0, periodValue );
 2dc:	e0 e0       	ldi	r30, 0x00	; 0
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	85 e6       	ldi	r24, 0x65	; 101
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	86 a3       	std	Z+38, r24	; 0x26
 2e6:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetCompareA( &TCD0, periodValue/2 );
 2e8:	82 e3       	ldi	r24, 0x32	; 50
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	80 af       	std	Z+56, r24	; 0x38
 2ee:	91 af       	std	Z+57, r25	; 0x39
	
	/* Configure the TC for single slope mode. */
	TC0_ConfigWGM( &TCD0, TC_WGMODE_SS_gc );
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	99 e0       	ldi	r25, 0x09	; 9
 2f6:	9f df       	rcall	.-194    	; 0x236 <TC0_ConfigWGM>

	/* Enable Compare channel A. */
	TC0_EnableCCChannels( &TCD0, TC0_CCAEN_bm );
 2f8:	60 e1       	ldi	r22, 0x10	; 16
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	99 e0       	ldi	r25, 0x09	; 9
 2fe:	a1 df       	rcall	.-190    	; 0x242 <TC0_EnableCCChannels>

	/* Start timer by selecting a clock source. */
	TC0_ConfigClockSource( &TCD0, TC_CLKSEL_DIV1_gc );
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	99 e0       	ldi	r25, 0x09	; 9
 306:	91 df       	rcall	.-222    	; 0x22a <TC0_ConfigClockSource>
	int output_sel = 0;
	int counter = 0;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
	/* Enable Compare channel A. */
	TC0_EnableCCChannels( &TCD0, TC0_CCAEN_bm );

	/* Start timer by selecting a clock source. */
	TC0_ConfigClockSource( &TCD0, TC_CLKSEL_DIV1_gc );
	int output_sel = 0;
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
		/************************************************
	    *  Wait for the new compare value to be latched
		*  from CCABUF[H:L] to CCA[H:L]. This happens at
		*  TC overflow (UPDATE ).
		************************************************/
		while( TC_GetOverflowFlag( &TCD0 ) == 0 ){};
 310:	e0 e0       	ldi	r30, 0x00	; 0
 312:	f9 e0       	ldi	r31, 0x09	; 9

		/* Clear overflow flag. */
		TC_ClearOverflowFlag( &TCD0 );
 314:	71 e0       	ldi	r23, 0x01	; 1
			if (output_sel == 1){ // turn output off (amplitude = 0)
				output_sel = 0;
				TC_SetCompareA( &TCD0, 0 );
			}else{ // turn output on (amplitude = Vcc)
				output_sel = 1;
				TC_SetCompareA( &TCD0, periodValue/2 );
 316:	42 e3       	ldi	r20, 0x32	; 50
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	10 c0       	rjmp	.+32     	; 0x33c <main+0xee>
		/* Output new compare value. */
		//TC_SetCompareA( &TCD0, 0x0001 );
		
		if (counter == 2500){ //this value determines the frequency of amplitude modulation

			if (output_sel == 1){ // turn output off (amplitude = 0)
 31c:	21 30       	cpi	r18, 0x01	; 1
 31e:	31 05       	cpc	r19, r1
 320:	39 f4       	brne	.+14     	; 0x330 <main+0xe2>
				output_sel = 0;
				TC_SetCompareA( &TCD0, 0 );
 322:	10 ae       	std	Z+56, r1	; 0x38
 324:	11 ae       	std	Z+57, r1	; 0x39
			}else{ // turn output on (amplitude = Vcc)
				output_sel = 1;
				TC_SetCompareA( &TCD0, periodValue/2 );
			}
			counter = 0;
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
		//TC_SetCompareA( &TCD0, 0x0001 );
		
		if (counter == 2500){ //this value determines the frequency of amplitude modulation

			if (output_sel == 1){ // turn output off (amplitude = 0)
				output_sel = 0;
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	06 c0       	rjmp	.+12     	; 0x33c <main+0xee>
				TC_SetCompareA( &TCD0, 0 );
			}else{ // turn output on (amplitude = Vcc)
				output_sel = 1;
				TC_SetCompareA( &TCD0, periodValue/2 );
 330:	40 af       	std	Z+56, r20	; 0x38
 332:	51 af       	std	Z+57, r21	; 0x39
			}
			counter = 0;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0

			if (output_sel == 1){ // turn output off (amplitude = 0)
				output_sel = 0;
				TC_SetCompareA( &TCD0, 0 );
			}else{ // turn output on (amplitude = Vcc)
				output_sel = 1;
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
		/************************************************
	    *  Wait for the new compare value to be latched
		*  from CCABUF[H:L] to CCA[H:L]. This happens at
		*  TC overflow (UPDATE ).
		************************************************/
		while( TC_GetOverflowFlag( &TCD0 ) == 0 ){};
 33c:	64 85       	ldd	r22, Z+12	; 0x0c
 33e:	60 ff       	sbrs	r22, 0
 340:	fd cf       	rjmp	.-6      	; 0x33c <main+0xee>

		/* Clear overflow flag. */
		TC_ClearOverflowFlag( &TCD0 );
 342:	74 87       	std	Z+12, r23	; 0x0c
		counter++;
 344:	01 96       	adiw	r24, 0x01	; 1
		//compareValue += 32;

		/* Output new compare value. */
		//TC_SetCompareA( &TCD0, 0x0001 );
		
		if (counter == 2500){ //this value determines the frequency of amplitude modulation
 346:	84 3c       	cpi	r24, 0xC4	; 196
 348:	69 e0       	ldi	r22, 0x09	; 9
 34a:	96 07       	cpc	r25, r22
 34c:	b9 f7       	brne	.-18     	; 0x33c <main+0xee>
 34e:	e6 cf       	rjmp	.-52     	; 0x31c <main+0xce>

00000350 <__vector_13>:

	} /* execution loop */
}

/*! TWIC Master Interrupt vector. */
ISR(TWIC_TWIM_vect){
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	08 b6       	in	r0, 0x38	; 56
 35c:	0f 92       	push	r0
 35e:	18 be       	out	0x38, r1	; 56
 360:	09 b6       	in	r0, 0x39	; 57
 362:	0f 92       	push	r0
 364:	19 be       	out	0x39, r1	; 57
 366:	0b b6       	in	r0, 0x3b	; 59
 368:	0f 92       	push	r0
 36a:	1b be       	out	0x3b, r1	; 59
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e2       	ldi	r25, 0x20	; 32
 388:	ef d0       	rcall	.+478    	; 0x568 <TWI_MasterInterruptHandler>
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0b be       	out	0x3b, r0	; 59
 3a6:	0f 90       	pop	r0
 3a8:	09 be       	out	0x39, r0	; 57
 3aa:	0f 90       	pop	r0
 3ac:	08 be       	out	0x38, r0	; 56
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <TWI_MasterInit>:
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
	return twi_status;
}
 3b8:	fc 01       	movw	r30, r24
 3ba:	60 83       	st	Z, r22
 3bc:	71 83       	std	Z+1, r23	; 0x01
 3be:	48 63       	ori	r20, 0x38	; 56
 3c0:	db 01       	movw	r26, r22
 3c2:	11 96       	adiw	r26, 0x01	; 1
 3c4:	4c 93       	st	X, r20
 3c6:	a0 81       	ld	r26, Z
 3c8:	b1 81       	ldd	r27, Z+1	; 0x01
 3ca:	15 96       	adiw	r26, 0x05	; 5
 3cc:	2c 93       	st	X, r18
 3ce:	01 90       	ld	r0, Z+
 3d0:	f0 81       	ld	r31, Z
 3d2:	e0 2d       	mov	r30, r0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	84 83       	std	Z+4, r24	; 0x04
 3d8:	08 95       	ret

000003da <TWI_MasterWriteRead>:
 3da:	0f 93       	push	r16
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	fc 01       	movw	r30, r24
 3e2:	29 30       	cpi	r18, 0x09	; 9
 3e4:	98 f5       	brcc	.+102    	; 0x44c <TWI_MasterWriteRead+0x72>
 3e6:	05 30       	cpi	r16, 0x05	; 5
 3e8:	98 f5       	brcc	.+102    	; 0x450 <TWI_MasterWriteRead+0x76>
 3ea:	83 89       	ldd	r24, Z+19	; 0x13
 3ec:	81 11       	cpse	r24, r1
 3ee:	32 c0       	rjmp	.+100    	; 0x454 <TWI_MasterWriteRead+0x7a>
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	83 8b       	std	Z+19, r24	; 0x13
 3f4:	14 8a       	std	Z+20, r1	; 0x14
 3f6:	66 0f       	add	r22, r22
 3f8:	62 83       	std	Z+2, r22	; 0x02
 3fa:	22 23       	and	r18, r18
 3fc:	69 f0       	breq	.+26     	; 0x418 <TWI_MasterWriteRead+0x3e>
 3fe:	a4 2f       	mov	r26, r20
 400:	b5 2f       	mov	r27, r21
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	8d 91       	ld	r24, X+
 408:	ef 01       	movw	r28, r30
 40a:	c4 0f       	add	r28, r20
 40c:	d5 1f       	adc	r29, r21
 40e:	8b 83       	std	Y+3, r24	; 0x03
 410:	4f 5f       	subi	r20, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	42 17       	cp	r20, r18
 416:	b8 f3       	brcs	.-18     	; 0x406 <TWI_MasterWriteRead+0x2c>
 418:	27 87       	std	Z+15, r18	; 0x0f
 41a:	00 8b       	std	Z+16, r16	; 0x10
 41c:	11 8a       	std	Z+17, r1	; 0x11
 41e:	12 8a       	std	Z+18, r1	; 0x12
 420:	87 85       	ldd	r24, Z+15	; 0x0f
 422:	88 23       	and	r24, r24
 424:	41 f0       	breq	.+16     	; 0x436 <TWI_MasterWriteRead+0x5c>
 426:	82 81       	ldd	r24, Z+2	; 0x02
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	01 90       	ld	r0, Z+
 42c:	f0 81       	ld	r31, Z
 42e:	e0 2d       	mov	r30, r0
 430:	86 83       	std	Z+6, r24	; 0x06
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	12 c0       	rjmp	.+36     	; 0x45a <TWI_MasterWriteRead+0x80>
 436:	80 89       	ldd	r24, Z+16	; 0x10
 438:	88 23       	and	r24, r24
 43a:	71 f0       	breq	.+28     	; 0x458 <TWI_MasterWriteRead+0x7e>
 43c:	82 81       	ldd	r24, Z+2	; 0x02
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	01 90       	ld	r0, Z+
 442:	f0 81       	ld	r31, Z
 444:	e0 2d       	mov	r30, r0
 446:	86 83       	std	Z+6, r24	; 0x06
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	07 c0       	rjmp	.+14     	; 0x45a <TWI_MasterWriteRead+0x80>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	05 c0       	rjmp	.+10     	; 0x45a <TWI_MasterWriteRead+0x80>
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	03 c0       	rjmp	.+6      	; 0x45a <TWI_MasterWriteRead+0x80>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	01 c0       	rjmp	.+2      	; 0x45a <TWI_MasterWriteRead+0x80>
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <TWI_MasterRead>:
 462:	0f 93       	push	r16
 464:	04 2f       	mov	r16, r20
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	b6 df       	rcall	.-148    	; 0x3da <TWI_MasterWriteRead>
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 472:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 474:	a0 81       	ld	r26, Z
 476:	b1 81       	ldd	r27, Z+1	; 0x01
 478:	14 96       	adiw	r26, 0x04	; 4
 47a:	8c 91       	ld	r24, X
 47c:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 47e:	82 ff       	sbrs	r24, 2
 480:	03 c0       	rjmp	.+6      	; 0x488 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 482:	94 e0       	ldi	r25, 0x04	; 4
 484:	94 8b       	std	Z+20, r25	; 0x14
 486:	02 c0       	rjmp	.+4      	; 0x48c <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 488:	93 e0       	ldi	r25, 0x03	; 3
 48a:	94 8b       	std	Z+20, r25	; 0x14
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	14 96       	adiw	r26, 0x04	; 4
 490:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
 492:	13 8a       	std	Z+19, r1	; 0x13
 494:	08 95       	ret

00000496 <TWI_MasterTransactionFinished>:
 *
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result){
	twi->result = result;
 496:	fc 01       	movw	r30, r24
 498:	64 8b       	std	Z+20, r22	; 0x14
	twi->status = TWIM_STATUS_READY;
 49a:	13 8a       	std	Z+19, r1	; 0x13
 49c:	08 95       	ret

0000049e <TWI_MasterReadHandler>:
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi){
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	ec 01       	movw	r28, r24

	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 4a4:	8a 89       	ldd	r24, Y+18	; 0x12
 4a6:	84 30       	cpi	r24, 0x04	; 4
 4a8:	98 f4       	brcc	.+38     	; 0x4d0 <TWI_MasterReadHandler+0x32>
		char temp = PORTC_DIR; // added
 4aa:	e0 e4       	ldi	r30, 0x40	; 64
 4ac:	f6 e0       	ldi	r31, 0x06	; 6
 4ae:	80 81       	ld	r24, Z
		PORTC_DIR = 0x00; // added
 4b0:	10 82       	st	Z, r1
		uint8_t data = twi->interface->MASTER.DATA;
 4b2:	a8 81       	ld	r26, Y
 4b4:	b9 81       	ldd	r27, Y+1	; 0x01
 4b6:	17 96       	adiw	r26, 0x07	; 7
 4b8:	9c 91       	ld	r25, X
		twi->readData[twi->bytesRead] = data;
 4ba:	2a 89       	ldd	r18, Y+18	; 0x12
 4bc:	de 01       	movw	r26, r28
 4be:	a2 0f       	add	r26, r18
 4c0:	b1 1d       	adc	r27, r1
 4c2:	1b 96       	adiw	r26, 0x0b	; 11
 4c4:	9c 93       	st	X, r25
		twi->bytesRead++;
 4c6:	9a 89       	ldd	r25, Y+18	; 0x12
 4c8:	9f 5f       	subi	r25, 0xFF	; 255
 4ca:	9a 8b       	std	Y+18, r25	; 0x12
		PORTC_DIR = temp; // added
 4cc:	80 83       	st	Z, r24
 4ce:	07 c0       	rjmp	.+14     	; 0x4de <TWI_MasterReadHandler+0x40>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4d0:	e8 81       	ld	r30, Y
 4d2:	f9 81       	ldd	r31, Y+1	; 0x01
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	83 83       	std	Z+3, r24	; 0x03
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	ce 01       	movw	r24, r28
 4dc:	dc df       	rcall	.-72     	; 0x496 <TWI_MasterTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 4de:	98 89       	ldd	r25, Y+16	; 0x10

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 4e0:	8a 89       	ldd	r24, Y+18	; 0x12
 4e2:	89 17       	cp	r24, r25
 4e4:	28 f4       	brcc	.+10     	; 0x4f0 <TWI_MasterReadHandler+0x52>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 4e6:	e8 81       	ld	r30, Y
 4e8:	f9 81       	ldd	r31, Y+1	; 0x01
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	83 83       	std	Z+3, r24	; 0x03
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <TWI_MasterReadHandler+0x60>
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 4f0:	e8 81       	ld	r30, Y
 4f2:	f9 81       	ldd	r31, Y+1	; 0x01
 4f4:	87 e0       	ldi	r24, 0x07	; 7
 4f6:	83 83       	std	Z+3, r24	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	ce 01       	movw	r24, r28
 4fc:	cc df       	rcall	.-104    	; 0x496 <TWI_MasterTransactionFinished>
	}
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 50a:	97 85       	ldd	r25, Z+15	; 0x0f
	uint8_t bytesToRead   = twi->bytesToRead;
 50c:	20 89       	ldd	r18, Z+16	; 0x10

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 50e:	a0 81       	ld	r26, Z
 510:	b1 81       	ldd	r27, Z+1	; 0x01
 512:	14 96       	adiw	r26, 0x04	; 4
 514:	8c 91       	ld	r24, X
 516:	14 97       	sbiw	r26, 0x04	; 4
 518:	84 ff       	sbrs	r24, 4
 51a:	07 c0       	rjmp	.+14     	; 0x52a <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	13 96       	adiw	r26, 0x03	; 3
 520:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	84 8b       	std	Z+20, r24	; 0x14
		twi->status = TWIM_STATUS_READY;
 526:	13 8a       	std	Z+19, r1	; 0x13
 528:	1c c0       	rjmp	.+56     	; 0x562 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 52a:	81 89       	ldd	r24, Z+17	; 0x11
 52c:	89 17       	cp	r24, r25
 52e:	58 f4       	brcc	.+22     	; 0x546 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 530:	81 89       	ldd	r24, Z+17	; 0x11
 532:	ef 01       	movw	r28, r30
 534:	c8 0f       	add	r28, r24
 536:	d1 1d       	adc	r29, r1
 538:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 53a:	17 96       	adiw	r26, 0x07	; 7
 53c:	8c 93       	st	X, r24
		++twi->bytesWritten;
 53e:	81 89       	ldd	r24, Z+17	; 0x11
 540:	8f 5f       	subi	r24, 0xFF	; 255
 542:	81 8b       	std	Z+17, r24	; 0x11
 544:	0e c0       	rjmp	.+28     	; 0x562 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 546:	82 89       	ldd	r24, Z+18	; 0x12
 548:	82 17       	cp	r24, r18
 54a:	28 f4       	brcc	.+10     	; 0x556 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 54c:	82 81       	ldd	r24, Z+2	; 0x02
 54e:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 550:	16 96       	adiw	r26, 0x06	; 6
 552:	8c 93       	st	X, r24
 554:	06 c0       	rjmp	.+12     	; 0x562 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	13 96       	adiw	r26, 0x03	; 3
 55a:	8c 93       	st	X, r24
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	cf 01       	movw	r24, r30
 560:	9a df       	rcall	.-204    	; 0x496 <TWI_MasterTransactionFinished>
	}
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 568:	dc 01       	movw	r26, r24
 56a:	ed 91       	ld	r30, X+
 56c:	fc 91       	ld	r31, X
 56e:	24 81       	ldd	r18, Z+4	; 0x04
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
 570:	32 2f       	mov	r19, r18
 572:	3c 70       	andi	r19, 0x0C	; 12
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 574:	09 f0       	breq	.+2      	; 0x578 <TWI_MasterInterruptHandler+0x10>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 576:	7d cf       	rjmp	.-262    	; 0x472 <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 578:	26 ff       	sbrs	r18, 6
 57a:	01 c0       	rjmp	.+2      	; 0x57e <TWI_MasterInterruptHandler+0x16>
		TWI_MasterWriteHandler(twi);
 57c:	c3 cf       	rjmp	.-122    	; 0x504 <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 57e:	22 23       	and	r18, r18
 580:	0c f4       	brge	.+2      	; 0x584 <TWI_MasterInterruptHandler+0x1c>
		TWI_MasterReadHandler(twi);
 582:	8d cf       	rjmp	.-230    	; 0x49e <TWI_MasterReadHandler>
	}

	/* If unexpected state. */
	else {
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_FAIL);
 584:	66 e0       	ldi	r22, 0x06	; 6
 586:	87 cf       	rjmp	.-242    	; 0x496 <TWI_MasterTransactionFinished>

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>

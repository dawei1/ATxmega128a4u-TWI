
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000668  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00802000  00802000  000006fc  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000288  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000043d3  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b74  00000000  00000000  00005531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b2  00000000  00000000  000060a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000594  00000000  00000000  00007558  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021ab  00000000  00000000  00007aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001401  00000000  00000000  00009c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000248  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
   6:	00 00       	nop
   8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
   e:	00 00       	nop
  10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
  16:	00 00       	nop
  18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
  1e:	00 00       	nop
  20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
  22:	00 00       	nop
  24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
  26:	00 00       	nop
  28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
  32:	00 00       	nop
  34:	47 c2       	rjmp	.+1166   	; 0x4c4 <__vector_13>
  36:	00 00       	nop
  38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
  42:	00 00       	nop
  44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
  46:	00 00       	nop
  48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
  4e:	00 00       	nop
  50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
  56:	00 00       	nop
  58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
  62:	00 00       	nop
  64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
  6e:	00 00       	nop
  70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
  72:	00 00       	nop
  74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
  76:	00 00       	nop
  78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
  82:	00 00       	nop
  84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
  86:	00 00       	nop
  88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
  92:	00 00       	nop
  94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
  96:	00 00       	nop
  98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
  fe:	00 00       	nop
 100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
 102:	00 00       	nop
 104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
 106:	00 00       	nop
 108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
 112:	00 00       	nop
 114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
 116:	00 00       	nop
 118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	0f c1       	rjmp	.+542    	; 0x33c <__vector_71>
 11e:	00 00       	nop
 120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
 122:	00 00       	nop
 124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
 126:	00 00       	nop
 128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
 132:	00 00       	nop
 134:	79 c0       	rjmp	.+242    	; 0x228 <__bad_interrupt>
 136:	00 00       	nop
 138:	77 c0       	rjmp	.+238    	; 0x228 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	75 c0       	rjmp	.+234    	; 0x228 <__bad_interrupt>
 13e:	00 00       	nop
 140:	73 c0       	rjmp	.+230    	; 0x228 <__bad_interrupt>
 142:	00 00       	nop
 144:	71 c0       	rjmp	.+226    	; 0x228 <__bad_interrupt>
 146:	00 00       	nop
 148:	6f c0       	rjmp	.+222    	; 0x228 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
 152:	00 00       	nop
 154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
 156:	00 00       	nop
 158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
 15e:	00 00       	nop
 160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
 162:	00 00       	nop
 164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
 166:	00 00       	nop
 168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
 16e:	00 00       	nop
 170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
 172:	00 00       	nop
 174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
 176:	00 00       	nop
 178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
 17e:	00 00       	nop
 180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
 182:	00 00       	nop
 184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
 186:	00 00       	nop
 188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
 192:	00 00       	nop
 194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
 196:	00 00       	nop
 198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3b c0       	rjmp	.+118    	; 0x228 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	39 c0       	rjmp	.+114    	; 0x228 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	37 c0       	rjmp	.+110    	; 0x228 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	31 c0       	rjmp	.+98     	; 0x228 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2d c0       	rjmp	.+90     	; 0x228 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2b c0       	rjmp	.+86     	; 0x228 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	25 c0       	rjmp	.+74     	; 0x228 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	23 c0       	rjmp	.+70     	; 0x228 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	17 c0       	rjmp	.+46     	; 0x228 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a8 31       	cpi	r26, 0x18	; 24
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	b7 d0       	rcall	.+366    	; 0x394 <main>
 226:	1e c2       	rjmp	.+1084   	; 0x664 <_exit>

00000228 <__bad_interrupt>:
 228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <ReadCalibrationByte>:
 22a:	aa ec       	ldi	r26, 0xCA	; 202
 22c:	b1 e0       	ldi	r27, 0x01	; 1
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	9c 93       	st	X, r25
 232:	e8 2f       	mov	r30, r24
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	84 91       	lpm	r24, Z
 238:	1c 92       	st	X, r1
 23a:	08 95       	ret

0000023c <adc_init>:
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	e0 e7       	ldi	r30, 0x70	; 112
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	81 81       	ldd	r24, Z+1	; 0x01
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	81 83       	std	Z+1, r24	; 0x01
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	ee df       	rcall	.-36     	; 0x22a <ReadCalibrationByte>
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	d2 e0       	ldi	r29, 0x02	; 2
 252:	8c 87       	std	Y+12, r24	; 0x0c
 254:	81 e2       	ldi	r24, 0x21	; 33
 256:	e9 df       	rcall	.-46     	; 0x22a <ReadCalibrationByte>
 258:	8d 87       	std	Y+13, r24	; 0x0d
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	e6 df       	rcall	.-52     	; 0x22a <ReadCalibrationByte>
 25e:	8c 87       	std	Y+12, r24	; 0x0c
 260:	81 e2       	ldi	r24, 0x21	; 33
 262:	e3 df       	rcall	.-58     	; 0x22a <ReadCalibrationByte>
 264:	8d 87       	std	Y+13, r24	; 0x0d
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	88 a3       	std	Y+32, r24	; 0x20
 26a:	98 e0       	ldi	r25, 0x08	; 8
 26c:	99 a3       	std	Y+33, r25	; 0x21
 26e:	90 e1       	ldi	r25, 0x10	; 16
 270:	98 83       	st	Y, r25
 272:	24 e0       	ldi	r18, 0x04	; 4
 274:	2c 83       	std	Y+4, r18	; 0x04
 276:	9a 83       	std	Y+2, r25	; 0x02
 278:	1b 82       	std	Y+3, r1	; 0x03
 27a:	8e 83       	std	Y+6, r24	; 0x06
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	9a a3       	std	Y+34, r25	; 0x22
 280:	88 83       	st	Y, r24
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <TC0_ConfigClockSource>:
 288:	fc 01       	movw	r30, r24
 28a:	20 81       	ld	r18, Z
 28c:	20 7f       	andi	r18, 0xF0	; 240
 28e:	62 2b       	or	r22, r18
 290:	60 83       	st	Z, r22
 292:	08 95       	ret

00000294 <TC0_ConfigWGM>:
 294:	fc 01       	movw	r30, r24
 296:	21 81       	ldd	r18, Z+1	; 0x01
 298:	28 7f       	andi	r18, 0xF8	; 248
 29a:	62 2b       	or	r22, r18
 29c:	61 83       	std	Z+1, r22	; 0x01
 29e:	08 95       	ret

000002a0 <TC0_EnableCCChannels>:
 2a0:	fc 01       	movw	r30, r24
 2a2:	21 81       	ldd	r18, Z+1	; 0x01
 2a4:	60 7f       	andi	r22, 0xF0	; 240
 2a6:	62 2b       	or	r22, r18
 2a8:	61 83       	std	Z+1, r22	; 0x01
 2aa:	08 95       	ret

000002ac <send_high>:
	int i;
	for (i=0; 8 > i ;++i) {
		if (bits & (mask << i)) send_high();
		else send_low();
	}
}
 2ac:	82 e4       	ldi	r24, 0x42	; 66
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	e0 e0       	ldi	r30, 0x00	; 0
 2b2:	f9 e0       	ldi	r31, 0x09	; 9
 2b4:	80 af       	std	Z+56, r24	; 0x38
 2b6:	91 af       	std	Z+57, r25	; 0x39
 2b8:	8c e2       	ldi	r24, 0x2C	; 44
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	31 e0       	ldi	r19, 0x01	; 1
 2be:	34 87       	std	Z+12, r19	; 0x0c
 2c0:	24 85       	ldd	r18, Z+12	; 0x0c
 2c2:	20 ff       	sbrs	r18, 0
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <send_high+0x14>
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	d1 f7       	brne	.-12     	; 0x2be <send_high+0x12>
 2ca:	08 95       	ret

000002cc <send_low>:
 2cc:	e0 e0       	ldi	r30, 0x00	; 0
 2ce:	f9 e0       	ldi	r31, 0x09	; 9
 2d0:	10 ae       	std	Z+56, r1	; 0x38
 2d2:	11 ae       	std	Z+57, r1	; 0x39
 2d4:	8c e2       	ldi	r24, 0x2C	; 44
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	31 e0       	ldi	r19, 0x01	; 1
 2da:	34 87       	std	Z+12, r19	; 0x0c
 2dc:	24 85       	ldd	r18, Z+12	; 0x0c
 2de:	20 ff       	sbrs	r18, 0
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <send_low+0x10>
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	d1 f7       	brne	.-12     	; 0x2da <send_low+0xe>
 2e6:	08 95       	ret

000002e8 <send_high_manchester>:


void send_high_manchester ( ) {
	send_low();
 2e8:	f1 df       	rcall	.-30     	; 0x2cc <send_low>
	send_high();
 2ea:	e0 cf       	rjmp	.-64     	; 0x2ac <send_high>

000002ec <send_low_manchester>:
}


void send_low_manchester ( ) {
	send_high();
 2ec:	df df       	rcall	.-66     	; 0x2ac <send_high>
	send_low();
 2ee:	ee cf       	rjmp	.-36     	; 0x2cc <send_low>

000002f0 <send_byte_manchester>:
}


void send_byte_manchester ( const unsigned char bits ) {
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
		if (bits & (mask << i)) send_high_manchester();
 300:	ee 24       	eor	r14, r14
 302:	e3 94       	inc	r14
 304:	f1 2c       	mov	r15, r1
 306:	08 2f       	mov	r16, r24
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	97 01       	movw	r18, r14
 30c:	0c 2e       	mov	r0, r28
 30e:	02 c0       	rjmp	.+4      	; 0x314 <send_byte_manchester+0x24>
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <send_byte_manchester+0x20>
 318:	20 23       	and	r18, r16
 31a:	31 23       	and	r19, r17
 31c:	23 2b       	or	r18, r19
 31e:	11 f0       	breq	.+4      	; 0x324 <send_byte_manchester+0x34>
 320:	e3 df       	rcall	.-58     	; 0x2e8 <send_high_manchester>
 322:	01 c0       	rjmp	.+2      	; 0x326 <send_byte_manchester+0x36>
		else send_low_manchester();
 324:	e3 df       	rcall	.-58     	; 0x2ec <send_low_manchester>


void send_byte_manchester ( const unsigned char bits ) {
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 326:	21 96       	adiw	r28, 0x01	; 1
 328:	c8 30       	cpi	r28, 0x08	; 8
 32a:	d1 05       	cpc	r29, r1
 32c:	71 f7       	brne	.-36     	; 0x30a <send_byte_manchester+0x1a>
		if (bits & (mask << i)) send_high_manchester();
		else send_low_manchester();
	}
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	08 95       	ret

0000033c <__vector_71>:




ISR(ADCA_CH0_vect) {
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	08 b6       	in	r0, 0x38	; 56
 348:	0f 92       	push	r0
 34a:	18 be       	out	0x38, r1	; 56
 34c:	0b b6       	in	r0, 0x3b	; 59
 34e:	0f 92       	push	r0
 350:	1b be       	out	0x3b, r1	; 59
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	int test = 0;
	adc_result = ADCA.CH0.RES;
 35a:	e0 e0       	ldi	r30, 0x00	; 0
 35c:	f2 e0       	ldi	r31, 0x02	; 2
 35e:	84 a1       	ldd	r24, Z+36	; 0x24
 360:	95 a1       	ldd	r25, Z+37	; 0x25
 362:	80 93 01 20 	sts	0x2001, r24
 366:	90 93 02 20 	sts	0x2002, r25
	
	//test = adc_result - 0x0550; //600-700mV threshold
	test = adc_result - 0x0384; ///400mv
 36a:	84 58       	subi	r24, 0x84	; 132
 36c:	93 40       	sbci	r25, 0x03	; 3
	//test = adc_result - 0x0960; //1.2v
	
	if (test > 0x0000)
 36e:	18 16       	cp	r1, r24
 370:	19 06       	cpc	r1, r25
 372:	1c f4       	brge	.+6      	; 0x37a <__vector_71+0x3e>
		result_flag = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 00 20 	sts	0x2000, r24
}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	0f 90       	pop	r0
 384:	0b be       	out	0x3b, r0	; 59
 386:	0f 90       	pop	r0
 388:	08 be       	out	0x38, r0	; 56
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <main>:

int main(void){
	/* Comment out the 3 lines below if you want to use
	   your own pull-up resistors (I recommend using 4.7k).
	*/
	PORTCFG.MPCMASK = 0x03;                                     // Configure several PINxCTRL registers.
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	80 93 b0 00 	sts	0x00B0, r24
	PORTC.PIN0CTRL =
		(PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;   // Use the internal pull-up resistors on PORTC's TWI Ports.
 39a:	e0 e4       	ldi	r30, 0x40	; 64
 39c:	f6 e0       	ldi	r31, 0x06	; 6
 39e:	80 89       	ldd	r24, Z+16	; 0x10
int main(void){
	/* Comment out the 3 lines below if you want to use
	   your own pull-up resistors (I recommend using 4.7k).
	*/
	PORTCFG.MPCMASK = 0x03;                                     // Configure several PINxCTRL registers.
	PORTC.PIN0CTRL =
 3a0:	87 7c       	andi	r24, 0xC7	; 199
 3a2:	88 61       	ori	r24, 0x18	; 24
 3a4:	80 8b       	std	Z+16, r24	; 0x10
		(PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;   // Use the internal pull-up resistors on PORTC's TWI Ports.

	TWI_MasterInit(
 3a6:	25 e0       	ldi	r18, 0x05	; 5
 3a8:	40 e4       	ldi	r20, 0x40	; 64
 3aa:	60 e8       	ldi	r22, 0x80	; 128
 3ac:	74 e0       	ldi	r23, 0x04	; 4
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	90 e2       	ldi	r25, 0x20	; 32
 3b2:	bc d0       	rcall	.+376    	; 0x52c <TWI_MasterInit>
		TWI_MASTER_INTLVL_LO_gc,
		TWI_BAUDSETTING
	);

	//PMIC.CTRL |= PMIC_LOLVLEN_bm;                               // Enable LO interrupt level.
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm; //0x07
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	e0 ea       	ldi	r30, 0xA0	; 160
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	82 83       	std	Z+2, r24	; 0x02
	sei();                                                      // Enable interrupts.
 3bc:	78 94       	sei

	PORTD.DIR = 0x01;                                           // Enable output on PortD0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 60 06 	sts	0x0660, r24

	TC0_ConfigWGM(&TCD0,TC_WGMODE_SS_gc);                       // Configure single slope mode.
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	99 e0       	ldi	r25, 0x09	; 9
 3ca:	64 df       	rcall	.-312    	; 0x294 <TC0_ConfigWGM>
	TC0_EnableCCChannels(&TCD0,TC0_CCAEN_bm);                   // Enable compare channel A.
 3cc:	60 e1       	ldi	r22, 0x10	; 16
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	99 e0       	ldi	r25, 0x09	; 9
 3d2:	66 df       	rcall	.-308    	; 0x2a0 <TC0_EnableCCChannels>
	TC0_ConfigClockSource(&TCD0,TC_CLKSEL_DIV1_gc);             // Start the timer by setting a clock source.
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	99 e0       	ldi	r25, 0x09	; 9
 3da:	56 df       	rcall	.-340    	; 0x288 <TC0_ConfigClockSource>

	TC_SetPeriod(&TCD0,TIMER_PERIOD);
 3dc:	e0 e0       	ldi	r30, 0x00	; 0
 3de:	f9 e0       	ldi	r31, 0x09	; 9
 3e0:	85 e8       	ldi	r24, 0x85	; 133
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	86 a3       	std	Z+38, r24	; 0x26
 3e6:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
 3e8:	82 e4       	ldi	r24, 0x42	; 66
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 af       	std	Z+56, r24	; 0x38
 3ee:	91 af       	std	Z+57, r25	; 0x39
	
	/* **************************************
	 * DEBUG: Known packet values to confirm
	 *        communication is working.
	 */
	twiMaster.readData[0] = 0xDE;
 3f0:	8e ed       	ldi	r24, 0xDE	; 222
 3f2:	80 93 0e 20 	sts	0x200E, r24
	twiMaster.readData[1] = 0xAD;
 3f6:	8d ea       	ldi	r24, 0xAD	; 173
 3f8:	80 93 0f 20 	sts	0x200F, r24
	twiMaster.readData[2] = 0xBE;
 3fc:	8e eb       	ldi	r24, 0xBE	; 190
 3fe:	80 93 10 20 	sts	0x2010, r24
	twiMaster.readData[3] = 0xEF;
 402:	8f ee       	ldi	r24, 0xEF	; 239
 404:	80 93 11 20 	sts	0x2011, r24
	
	int i;
	int checkSum = 0;

	// Initialize ADC
	adc_init();
 408:	19 df       	rcall	.-462    	; 0x23c <adc_init>
	PORTB_DIR = 0xFF;
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	80 93 20 06 	sts	0x0620, r24
	PORTA_DIR = 0x00;
 410:	10 92 00 06 	sts	0x0600, r1
	
	send_low();
 414:	5b df       	rcall	.-330    	; 0x2cc <send_low>
	
	while(1){
		// Start ADC conversion
		ADCA.CH0.CTRL |= 0x80;
 416:	81 2c       	mov	r8, r1
 418:	68 94       	set
 41a:	99 24       	eor	r9, r9
 41c:	91 f8       	bld	r9, 1
			/* **************************************
			 * DEBUG: writes a one to Port B0 when
			 *        the ADC value is past the high
			 *        threshold
			 */
			PORTB_OUT = 0x01;
 41e:	0f 2e       	mov	r0, r31
 420:	f4 e2       	ldi	r31, 0x24	; 36
 422:	ef 2e       	mov	r14, r31
 424:	f6 e0       	ldi	r31, 0x06	; 6
 426:	ff 2e       	mov	r15, r31
 428:	f0 2d       	mov	r31, r0
 42a:	bb 24       	eor	r11, r11
 42c:	b3 94       	inc	r11
			checkSum = 0;
			for (i = 0; i < 4; i++) {
				unsigned char mask = 0x01;
				int j;
				for (j=0; j < 8 ;j++) {
					if (twiMaster.readData[i] & (mask << j))
 42e:	cc 24       	eor	r12, r12
 430:	c3 94       	inc	r12
 432:	d1 2c       	mov	r13, r1
	
	send_low();
	
	while(1){
		// Start ADC conversion
		ADCA.CH0.CTRL |= 0x80;
 434:	f4 01       	movw	r30, r8
 436:	80 a1       	ldd	r24, Z+32	; 0x20
 438:	80 68       	ori	r24, 0x80	; 128
 43a:	80 a3       	std	Z+32, r24	; 0x20

		// Check if enable flag was set high
		if (result_flag){
 43c:	80 91 00 20 	lds	r24, 0x2000
 440:	88 23       	and	r24, r24
 442:	09 f4       	brne	.+2      	; 0x446 <main+0xb2>
 444:	3c c0       	rjmp	.+120    	; 0x4be <main+0x12a>
			// Disable interrupts to send packet
			cli();
 446:	f8 94       	cli
			/* **************************************
			 * DEBUG: writes a one to Port B0 when
			 *        the ADC value is past the high
			 *        threshold
			 */
			PORTB_OUT = 0x01;
 448:	f7 01       	movw	r30, r14
 44a:	b0 82       	st	Z, r11
				TWIM_READ_BUFFER_SIZE);                    // Begin a TWI transaction.
			while (twiMaster.status != TWIM_STATUS_READY); // Wait until the transaction completes.
			*/
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
				SLAVE_ADDRESS,
				TWIM_READ_BUFFER_SIZE);                    // Begin a TWI transaction.
			while (twiMaster.status != TWIM_STATUS_READY); // Wait until the transaction completes.
			*/
			// Reset and then create packet checksum
			checkSum = 0;
 450:	c0 e0       	ldi	r28, 0x00	; 0
 452:	d0 e0       	ldi	r29, 0x00	; 0
 454:	17 c0       	rjmp	.+46     	; 0x484 <main+0xf0>
			for (i = 0; i < 4; i++) {
				unsigned char mask = 0x01;
				int j;
				for (j=0; j < 8 ;j++) {
					if (twiMaster.readData[i] & (mask << j))
 456:	40 81       	ld	r20, Z
 458:	b6 01       	movw	r22, r12
 45a:	02 2e       	mov	r0, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <main+0xce>
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <main+0xca>
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	46 23       	and	r20, r22
 46a:	57 23       	and	r21, r23
 46c:	45 2b       	or	r20, r21
 46e:	09 f0       	breq	.+2      	; 0x472 <main+0xde>
						checkSum += 1;
 470:	21 96       	adiw	r28, 0x01	; 1
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
				unsigned char mask = 0x01;
				int j;
				for (j=0; j < 8 ;j++) {
 472:	2f 5f       	subi	r18, 0xFF	; 255
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	28 30       	cpi	r18, 0x08	; 8
 478:	31 05       	cpc	r19, r1
 47a:	69 f7       	brne	.-38     	; 0x456 <main+0xc2>
				TWIM_READ_BUFFER_SIZE);                    // Begin a TWI transaction.
			while (twiMaster.status != TWIM_STATUS_READY); // Wait until the transaction completes.
			*/
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	84 30       	cpi	r24, 0x04	; 4
 480:	91 05       	cpc	r25, r1
 482:	31 f0       	breq	.+12     	; 0x490 <main+0xfc>
}




int main(void){
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
			checkSum = 0;
			for (i = 0; i < 4; i++) {
				unsigned char mask = 0x01;
				int j;
				for (j=0; j < 8 ;j++) {
					if (twiMaster.readData[i] & (mask << j))
 488:	fc 01       	movw	r30, r24
 48a:	e2 5f       	subi	r30, 0xF2	; 242
 48c:	ff 4d       	sbci	r31, 0xDF	; 223
 48e:	e3 cf       	rjmp	.-58     	; 0x456 <main+0xc2>
				}
			}
			
			// Clear input stream to iPhone then send start edge
			for (i = 0; i < 3; i++) {
				send_low();
 490:	1d df       	rcall	.-454    	; 0x2cc <send_low>
 492:	1c df       	rcall	.-456    	; 0x2cc <send_low>
 494:	1b df       	rcall	.-458    	; 0x2cc <send_low>
			}
			send_high();
 496:	0a df       	rcall	.-492    	; 0x2ac <send_high>
			
			// Send data
			for (i=TWIM_READ_BUFFER_SIZE-1; 0 <= i ;--i) {          // Iterate through the results.
 498:	03 e0       	ldi	r16, 0x03	; 3
 49a:	10 e0       	ldi	r17, 0x00	; 0
				send_byte_manchester(twiMaster.readData[i]);      // Send the data using Manchester encoding.
 49c:	f8 01       	movw	r30, r16
 49e:	ed 5f       	subi	r30, 0xFD	; 253
 4a0:	ff 4d       	sbci	r31, 0xDF	; 223
 4a2:	83 85       	ldd	r24, Z+11	; 0x0b
 4a4:	25 df       	rcall	.-438    	; 0x2f0 <send_byte_manchester>
				send_low();
			}
			send_high();
			
			// Send data
			for (i=TWIM_READ_BUFFER_SIZE-1; 0 <= i ;--i) {          // Iterate through the results.
 4a6:	01 50       	subi	r16, 0x01	; 1
 4a8:	11 09       	sbc	r17, r1
 4aa:	c0 f7       	brcc	.-16     	; 0x49c <main+0x108>
				send_byte_manchester(twiMaster.readData[i]);      // Send the data using Manchester encoding.
			}
			
			// Send checksum
			send_byte_manchester(checkSum);
 4ac:	8c 2f       	mov	r24, r28
 4ae:	20 df       	rcall	.-448    	; 0x2f0 <send_byte_manchester>
			
			// Clear input buffer to iPhone with
			for (i = 0; i < 3; i++) {
				send_low();
 4b0:	0d df       	rcall	.-486    	; 0x2cc <send_low>
 4b2:	0c df       	rcall	.-488    	; 0x2cc <send_low>
 4b4:	0b df       	rcall	.-490    	; 0x2cc <send_low>
			}
			
			// Reset result_flag and Enable interrupts to check ADC
			result_flag = 0;
 4b6:	10 92 00 20 	sts	0x2000, r1
			sei();
 4ba:	78 94       	sei
 4bc:	bb cf       	rjmp	.-138    	; 0x434 <main+0xa0>
			/* **************************************
			 * DEBUG: writes a zero to Port B0 when
			 *        the ADC value is below the high
			 *        threshold
			 */
			PORTB_OUT = 0x00;
 4be:	f7 01       	movw	r30, r14
 4c0:	10 82       	st	Z, r1
 4c2:	b8 cf       	rjmp	.-144    	; 0x434 <main+0xa0>

000004c4 <__vector_13>:
	}
}


/*! TWIC Master Interrupt vector. */
ISR(TWIC_TWIM_vect){
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	08 b6       	in	r0, 0x38	; 56
 4d0:	0f 92       	push	r0
 4d2:	18 be       	out	0x38, r1	; 56
 4d4:	09 b6       	in	r0, 0x39	; 57
 4d6:	0f 92       	push	r0
 4d8:	19 be       	out	0x39, r1	; 57
 4da:	0b b6       	in	r0, 0x3b	; 59
 4dc:	0f 92       	push	r0
 4de:	1b be       	out	0x3b, r1	; 59
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 4f8:	83 e0       	ldi	r24, 0x03	; 3
 4fa:	90 e2       	ldi	r25, 0x20	; 32
 4fc:	a3 d0       	rcall	.+326    	; 0x644 <TWI_MasterInterruptHandler>
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	09 be       	out	0x39, r0	; 57
 51e:	0f 90       	pop	r0
 520:	08 be       	out	0x38, r0	; 56
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <TWI_MasterInit>:
 52c:	fc 01       	movw	r30, r24
 52e:	60 83       	st	Z, r22
 530:	71 83       	std	Z+1, r23	; 0x01
 532:	48 63       	ori	r20, 0x38	; 56
 534:	db 01       	movw	r26, r22
 536:	11 96       	adiw	r26, 0x01	; 1
 538:	4c 93       	st	X, r20
 53a:	a0 81       	ld	r26, Z
 53c:	b1 81       	ldd	r27, Z+1	; 0x01
 53e:	15 96       	adiw	r26, 0x05	; 5
 540:	2c 93       	st	X, r18
 542:	01 90       	ld	r0, Z+
 544:	f0 81       	ld	r31, Z
 546:	e0 2d       	mov	r30, r0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	84 83       	std	Z+4, r24	; 0x04
 54c:	08 95       	ret

0000054e <TWI_MasterArbitrationLostBusErrorHandler>:
 54e:	fc 01       	movw	r30, r24
 550:	a0 81       	ld	r26, Z
 552:	b1 81       	ldd	r27, Z+1	; 0x01
 554:	14 96       	adiw	r26, 0x04	; 4
 556:	8c 91       	ld	r24, X
 558:	14 97       	sbiw	r26, 0x04	; 4
 55a:	82 ff       	sbrs	r24, 2
 55c:	03 c0       	rjmp	.+6      	; 0x564 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
 55e:	94 e0       	ldi	r25, 0x04	; 4
 560:	94 8b       	std	Z+20, r25	; 0x14
 562:	02 c0       	rjmp	.+4      	; 0x568 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	94 8b       	std	Z+20, r25	; 0x14
 568:	88 60       	ori	r24, 0x08	; 8
 56a:	14 96       	adiw	r26, 0x04	; 4
 56c:	8c 93       	st	X, r24
 56e:	13 8a       	std	Z+19, r1	; 0x13
 570:	08 95       	ret

00000572 <TWI_MasterTransactionFinished>:
 572:	fc 01       	movw	r30, r24
 574:	64 8b       	std	Z+20, r22	; 0x14
 576:	13 8a       	std	Z+19, r1	; 0x13
 578:	08 95       	ret

0000057a <TWI_MasterReadHandler>:
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	ec 01       	movw	r28, r24
 580:	8a 89       	ldd	r24, Y+18	; 0x12
 582:	84 30       	cpi	r24, 0x04	; 4
 584:	98 f4       	brcc	.+38     	; 0x5ac <TWI_MasterReadHandler+0x32>
 586:	e0 e4       	ldi	r30, 0x40	; 64
 588:	f6 e0       	ldi	r31, 0x06	; 6
 58a:	80 81       	ld	r24, Z
 58c:	10 82       	st	Z, r1
 58e:	a8 81       	ld	r26, Y
 590:	b9 81       	ldd	r27, Y+1	; 0x01
 592:	17 96       	adiw	r26, 0x07	; 7
 594:	9c 91       	ld	r25, X
 596:	2a 89       	ldd	r18, Y+18	; 0x12
 598:	de 01       	movw	r26, r28
 59a:	a2 0f       	add	r26, r18
 59c:	b1 1d       	adc	r27, r1
 59e:	1b 96       	adiw	r26, 0x0b	; 11
 5a0:	9c 93       	st	X, r25
 5a2:	9a 89       	ldd	r25, Y+18	; 0x12
 5a4:	9f 5f       	subi	r25, 0xFF	; 255
 5a6:	9a 8b       	std	Y+18, r25	; 0x12
 5a8:	80 83       	st	Z, r24
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <TWI_MasterReadHandler+0x40>
 5ac:	e8 81       	ld	r30, Y
 5ae:	f9 81       	ldd	r31, Y+1	; 0x01
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	83 83       	std	Z+3, r24	; 0x03
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	ce 01       	movw	r24, r28
 5b8:	dc df       	rcall	.-72     	; 0x572 <TWI_MasterTransactionFinished>
 5ba:	98 89       	ldd	r25, Y+16	; 0x10
 5bc:	8a 89       	ldd	r24, Y+18	; 0x12
 5be:	89 17       	cp	r24, r25
 5c0:	28 f4       	brcc	.+10     	; 0x5cc <TWI_MasterReadHandler+0x52>
 5c2:	e8 81       	ld	r30, Y
 5c4:	f9 81       	ldd	r31, Y+1	; 0x01
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	83 83       	std	Z+3, r24	; 0x03
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <TWI_MasterReadHandler+0x60>
 5cc:	e8 81       	ld	r30, Y
 5ce:	f9 81       	ldd	r31, Y+1	; 0x01
 5d0:	87 e0       	ldi	r24, 0x07	; 7
 5d2:	83 83       	std	Z+3, r24	; 0x03
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	ce 01       	movw	r24, r28
 5d8:	cc df       	rcall	.-104    	; 0x572 <TWI_MasterTransactionFinished>
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <TWI_MasterWriteHandler>:
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	fc 01       	movw	r30, r24
 5e6:	97 85       	ldd	r25, Z+15	; 0x0f
 5e8:	20 89       	ldd	r18, Z+16	; 0x10
 5ea:	a0 81       	ld	r26, Z
 5ec:	b1 81       	ldd	r27, Z+1	; 0x01
 5ee:	14 96       	adiw	r26, 0x04	; 4
 5f0:	8c 91       	ld	r24, X
 5f2:	14 97       	sbiw	r26, 0x04	; 4
 5f4:	84 ff       	sbrs	r24, 4
 5f6:	07 c0       	rjmp	.+14     	; 0x606 <TWI_MasterWriteHandler+0x26>
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	13 96       	adiw	r26, 0x03	; 3
 5fc:	8c 93       	st	X, r24
 5fe:	85 e0       	ldi	r24, 0x05	; 5
 600:	84 8b       	std	Z+20, r24	; 0x14
 602:	13 8a       	std	Z+19, r1	; 0x13
 604:	1c c0       	rjmp	.+56     	; 0x63e <TWI_MasterWriteHandler+0x5e>
 606:	81 89       	ldd	r24, Z+17	; 0x11
 608:	89 17       	cp	r24, r25
 60a:	58 f4       	brcc	.+22     	; 0x622 <TWI_MasterWriteHandler+0x42>
 60c:	81 89       	ldd	r24, Z+17	; 0x11
 60e:	ef 01       	movw	r28, r30
 610:	c8 0f       	add	r28, r24
 612:	d1 1d       	adc	r29, r1
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	17 96       	adiw	r26, 0x07	; 7
 618:	8c 93       	st	X, r24
 61a:	81 89       	ldd	r24, Z+17	; 0x11
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	81 8b       	std	Z+17, r24	; 0x11
 620:	0e c0       	rjmp	.+28     	; 0x63e <TWI_MasterWriteHandler+0x5e>
 622:	82 89       	ldd	r24, Z+18	; 0x12
 624:	82 17       	cp	r24, r18
 626:	28 f4       	brcc	.+10     	; 0x632 <TWI_MasterWriteHandler+0x52>
 628:	82 81       	ldd	r24, Z+2	; 0x02
 62a:	81 60       	ori	r24, 0x01	; 1
 62c:	16 96       	adiw	r26, 0x06	; 6
 62e:	8c 93       	st	X, r24
 630:	06 c0       	rjmp	.+12     	; 0x63e <TWI_MasterWriteHandler+0x5e>
 632:	83 e0       	ldi	r24, 0x03	; 3
 634:	13 96       	adiw	r26, 0x03	; 3
 636:	8c 93       	st	X, r24
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	cf 01       	movw	r24, r30
 63c:	9a df       	rcall	.-204    	; 0x572 <TWI_MasterTransactionFinished>
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <TWI_MasterInterruptHandler>:
 644:	dc 01       	movw	r26, r24
 646:	ed 91       	ld	r30, X+
 648:	fc 91       	ld	r31, X
 64a:	24 81       	ldd	r18, Z+4	; 0x04
 64c:	32 2f       	mov	r19, r18
 64e:	3c 70       	andi	r19, 0x0C	; 12
 650:	09 f0       	breq	.+2      	; 0x654 <TWI_MasterInterruptHandler+0x10>
 652:	7d cf       	rjmp	.-262    	; 0x54e <TWI_MasterArbitrationLostBusErrorHandler>
 654:	26 ff       	sbrs	r18, 6
 656:	01 c0       	rjmp	.+2      	; 0x65a <TWI_MasterInterruptHandler+0x16>
 658:	c3 cf       	rjmp	.-122    	; 0x5e0 <TWI_MasterWriteHandler>
 65a:	22 23       	and	r18, r18
 65c:	0c f4       	brge	.+2      	; 0x660 <TWI_MasterInterruptHandler+0x1c>
 65e:	8d cf       	rjmp	.-230    	; 0x57a <TWI_MasterReadHandler>
 660:	66 e0       	ldi	r22, 0x06	; 6
 662:	87 cf       	rjmp	.-242    	; 0x572 <TWI_MasterTransactionFinished>

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>

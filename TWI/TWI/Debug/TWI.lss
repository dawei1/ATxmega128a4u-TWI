
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000708  0000079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00802000  00802000  0000079c  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000288  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004413  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b73  00000000  00000000  00005611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014ac  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000594  00000000  00000000  00007630  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021ab  00000000  00000000  00007bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000013e9  00000000  00000000  00009d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000228  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
   6:	00 00       	nop
   8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
   e:	00 00       	nop
  10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
  16:	00 00       	nop
  18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
  1e:	00 00       	nop
  20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
  22:	00 00       	nop
  24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
  26:	00 00       	nop
  28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
  32:	00 00       	nop
  34:	4b c2       	rjmp	.+1174   	; 0x4cc <__vector_13>
  36:	00 00       	nop
  38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
  42:	00 00       	nop
  44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
  46:	00 00       	nop
  48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
  4e:	00 00       	nop
  50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
  56:	00 00       	nop
  58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
  62:	00 00       	nop
  64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
  6e:	00 00       	nop
  70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
  72:	00 00       	nop
  74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
  76:	00 00       	nop
  78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
  82:	00 00       	nop
  84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
  86:	00 00       	nop
  88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
  92:	00 00       	nop
  94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
  96:	00 00       	nop
  98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
  fe:	00 00       	nop
 100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
 102:	00 00       	nop
 104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
 106:	00 00       	nop
 108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
 112:	00 00       	nop
 114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
 116:	00 00       	nop
 118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	0f c1       	rjmp	.+542    	; 0x33c <__vector_71>
 11e:	00 00       	nop
 120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
 122:	00 00       	nop
 124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
 126:	00 00       	nop
 128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
 132:	00 00       	nop
 134:	79 c0       	rjmp	.+242    	; 0x228 <__bad_interrupt>
 136:	00 00       	nop
 138:	77 c0       	rjmp	.+238    	; 0x228 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	75 c0       	rjmp	.+234    	; 0x228 <__bad_interrupt>
 13e:	00 00       	nop
 140:	73 c0       	rjmp	.+230    	; 0x228 <__bad_interrupt>
 142:	00 00       	nop
 144:	71 c0       	rjmp	.+226    	; 0x228 <__bad_interrupt>
 146:	00 00       	nop
 148:	6f c0       	rjmp	.+222    	; 0x228 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
 152:	00 00       	nop
 154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
 156:	00 00       	nop
 158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
 15e:	00 00       	nop
 160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
 162:	00 00       	nop
 164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
 166:	00 00       	nop
 168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
 16e:	00 00       	nop
 170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
 172:	00 00       	nop
 174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
 176:	00 00       	nop
 178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
 17e:	00 00       	nop
 180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
 182:	00 00       	nop
 184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
 186:	00 00       	nop
 188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
 192:	00 00       	nop
 194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
 196:	00 00       	nop
 198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3b c0       	rjmp	.+118    	; 0x228 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	39 c0       	rjmp	.+114    	; 0x228 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	37 c0       	rjmp	.+110    	; 0x228 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	31 c0       	rjmp	.+98     	; 0x228 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2d c0       	rjmp	.+90     	; 0x228 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2b c0       	rjmp	.+86     	; 0x228 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	25 c0       	rjmp	.+74     	; 0x228 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	23 c0       	rjmp	.+70     	; 0x228 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	17 c0       	rjmp	.+46     	; 0x228 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a8 31       	cpi	r26, 0x18	; 24
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	b7 d0       	rcall	.+366    	; 0x394 <main>
 226:	6e c2       	rjmp	.+1244   	; 0x704 <_exit>

00000228 <__bad_interrupt>:
 228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <ReadCalibrationByte>:
 22a:	aa ec       	ldi	r26, 0xCA	; 202
 22c:	b1 e0       	ldi	r27, 0x01	; 1
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	9c 93       	st	X, r25
 232:	e8 2f       	mov	r30, r24
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	84 91       	lpm	r24, Z
 238:	1c 92       	st	X, r1
 23a:	08 95       	ret

0000023c <adc_init>:
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	e0 e7       	ldi	r30, 0x70	; 112
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	81 81       	ldd	r24, Z+1	; 0x01
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	81 83       	std	Z+1, r24	; 0x01
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	ee df       	rcall	.-36     	; 0x22a <ReadCalibrationByte>
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	d2 e0       	ldi	r29, 0x02	; 2
 252:	8c 87       	std	Y+12, r24	; 0x0c
 254:	81 e2       	ldi	r24, 0x21	; 33
 256:	e9 df       	rcall	.-46     	; 0x22a <ReadCalibrationByte>
 258:	8d 87       	std	Y+13, r24	; 0x0d
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	e6 df       	rcall	.-52     	; 0x22a <ReadCalibrationByte>
 25e:	8c 87       	std	Y+12, r24	; 0x0c
 260:	81 e2       	ldi	r24, 0x21	; 33
 262:	e3 df       	rcall	.-58     	; 0x22a <ReadCalibrationByte>
 264:	8d 87       	std	Y+13, r24	; 0x0d
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	88 a3       	std	Y+32, r24	; 0x20
 26a:	98 e0       	ldi	r25, 0x08	; 8
 26c:	99 a3       	std	Y+33, r25	; 0x21
 26e:	90 e1       	ldi	r25, 0x10	; 16
 270:	98 83       	st	Y, r25
 272:	24 e0       	ldi	r18, 0x04	; 4
 274:	2c 83       	std	Y+4, r18	; 0x04
 276:	9a 83       	std	Y+2, r25	; 0x02
 278:	1b 82       	std	Y+3, r1	; 0x03
 27a:	8e 83       	std	Y+6, r24	; 0x06
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	9a a3       	std	Y+34, r25	; 0x22
 280:	88 83       	st	Y, r24
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <TC0_ConfigClockSource>:
 288:	fc 01       	movw	r30, r24
 28a:	20 81       	ld	r18, Z
 28c:	20 7f       	andi	r18, 0xF0	; 240
 28e:	62 2b       	or	r22, r18
 290:	60 83       	st	Z, r22
 292:	08 95       	ret

00000294 <TC0_ConfigWGM>:
 294:	fc 01       	movw	r30, r24
 296:	21 81       	ldd	r18, Z+1	; 0x01
 298:	28 7f       	andi	r18, 0xF8	; 248
 29a:	62 2b       	or	r22, r18
 29c:	61 83       	std	Z+1, r22	; 0x01
 29e:	08 95       	ret

000002a0 <TC0_EnableCCChannels>:
 2a0:	fc 01       	movw	r30, r24
 2a2:	21 81       	ldd	r18, Z+1	; 0x01
 2a4:	60 7f       	andi	r22, 0xF0	; 240
 2a6:	62 2b       	or	r22, r18
 2a8:	61 83       	std	Z+1, r22	; 0x01
 2aa:	08 95       	ret

000002ac <send_high>:
	int i;
	for (i=0; 8 > i ;++i) {
		if (bits & (mask << i)) send_high();
		else send_low();
	}
}
 2ac:	82 e4       	ldi	r24, 0x42	; 66
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	e0 e0       	ldi	r30, 0x00	; 0
 2b2:	f9 e0       	ldi	r31, 0x09	; 9
 2b4:	80 af       	std	Z+56, r24	; 0x38
 2b6:	91 af       	std	Z+57, r25	; 0x39
 2b8:	8c e2       	ldi	r24, 0x2C	; 44
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	31 e0       	ldi	r19, 0x01	; 1
 2be:	34 87       	std	Z+12, r19	; 0x0c
 2c0:	24 85       	ldd	r18, Z+12	; 0x0c
 2c2:	20 ff       	sbrs	r18, 0
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <send_high+0x14>
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	d1 f7       	brne	.-12     	; 0x2be <send_high+0x12>
 2ca:	08 95       	ret

000002cc <send_low>:
 2cc:	e0 e0       	ldi	r30, 0x00	; 0
 2ce:	f9 e0       	ldi	r31, 0x09	; 9
 2d0:	10 ae       	std	Z+56, r1	; 0x38
 2d2:	11 ae       	std	Z+57, r1	; 0x39
 2d4:	8c e2       	ldi	r24, 0x2C	; 44
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	31 e0       	ldi	r19, 0x01	; 1
 2da:	34 87       	std	Z+12, r19	; 0x0c
 2dc:	24 85       	ldd	r18, Z+12	; 0x0c
 2de:	20 ff       	sbrs	r18, 0
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <send_low+0x10>
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	d1 f7       	brne	.-12     	; 0x2da <send_low+0xe>
 2e6:	08 95       	ret

000002e8 <send_high_manchester>:


void send_high_manchester ( ) {
	send_low();
 2e8:	f1 df       	rcall	.-30     	; 0x2cc <send_low>
	send_high();
 2ea:	e0 cf       	rjmp	.-64     	; 0x2ac <send_high>

000002ec <send_low_manchester>:
}


void send_low_manchester ( ) {
	send_high();
 2ec:	df df       	rcall	.-66     	; 0x2ac <send_high>
	send_low();
 2ee:	ee cf       	rjmp	.-36     	; 0x2cc <send_low>

000002f0 <send_byte_manchester>:
}


void send_byte_manchester ( const unsigned char bits ) {
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
		if (bits & (mask << i)) send_high_manchester();
 300:	ee 24       	eor	r14, r14
 302:	e3 94       	inc	r14
 304:	f1 2c       	mov	r15, r1
 306:	08 2f       	mov	r16, r24
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	97 01       	movw	r18, r14
 30c:	0c 2e       	mov	r0, r28
 30e:	02 c0       	rjmp	.+4      	; 0x314 <send_byte_manchester+0x24>
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <send_byte_manchester+0x20>
 318:	20 23       	and	r18, r16
 31a:	31 23       	and	r19, r17
 31c:	23 2b       	or	r18, r19
 31e:	11 f0       	breq	.+4      	; 0x324 <send_byte_manchester+0x34>
 320:	e3 df       	rcall	.-58     	; 0x2e8 <send_high_manchester>
 322:	01 c0       	rjmp	.+2      	; 0x326 <send_byte_manchester+0x36>
		else send_low_manchester();
 324:	e3 df       	rcall	.-58     	; 0x2ec <send_low_manchester>


void send_byte_manchester ( const unsigned char bits ) {
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 326:	21 96       	adiw	r28, 0x01	; 1
 328:	c8 30       	cpi	r28, 0x08	; 8
 32a:	d1 05       	cpc	r29, r1
 32c:	71 f7       	brne	.-36     	; 0x30a <send_byte_manchester+0x1a>
		if (bits & (mask << i)) send_high_manchester();
		else send_low_manchester();
	}
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	08 95       	ret

0000033c <__vector_71>:




ISR(ADCA_CH0_vect) {
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	08 b6       	in	r0, 0x38	; 56
 348:	0f 92       	push	r0
 34a:	18 be       	out	0x38, r1	; 56
 34c:	0b b6       	in	r0, 0x3b	; 59
 34e:	0f 92       	push	r0
 350:	1b be       	out	0x3b, r1	; 59
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	int test = 0;
	adc_result = ADCA.CH0.RES;
 35a:	e0 e0       	ldi	r30, 0x00	; 0
 35c:	f2 e0       	ldi	r31, 0x02	; 2
 35e:	84 a1       	ldd	r24, Z+36	; 0x24
 360:	95 a1       	ldd	r25, Z+37	; 0x25
 362:	80 93 01 20 	sts	0x2001, r24
 366:	90 93 02 20 	sts	0x2002, r25
	
	//test = adc_result - 0x0550; //600-700mV threshold
	test = adc_result - 0x0384; ///400mv
 36a:	84 58       	subi	r24, 0x84	; 132
 36c:	93 40       	sbci	r25, 0x03	; 3
	//test = adc_result - 0x0960; //1.2v
	
	if (test > 0x0000)
 36e:	18 16       	cp	r1, r24
 370:	19 06       	cpc	r1, r25
 372:	1c f4       	brge	.+6      	; 0x37a <__vector_71+0x3e>
		result_flag = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 00 20 	sts	0x2000, r24
}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	0f 90       	pop	r0
 384:	0b be       	out	0x3b, r0	; 59
 386:	0f 90       	pop	r0
 388:	08 be       	out	0x38, r0	; 56
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <main>:

int main(void){
	/* Comment out the 3 lines below if you want to use
	   your own pull-up resistors (I recommend using 4.7k).
	*/
	PORTCFG.MPCMASK = 0x03;                                     // Configure several PINxCTRL registers.
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	80 93 b0 00 	sts	0x00B0, r24
	PORTC.PIN0CTRL =
		(PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;   // Use the internal pull-up resistors on PORTC's TWI Ports.
 39a:	e0 e4       	ldi	r30, 0x40	; 64
 39c:	f6 e0       	ldi	r31, 0x06	; 6
 39e:	80 89       	ldd	r24, Z+16	; 0x10
int main(void){
	/* Comment out the 3 lines below if you want to use
	   your own pull-up resistors (I recommend using 4.7k).
	*/
	PORTCFG.MPCMASK = 0x03;                                     // Configure several PINxCTRL registers.
	PORTC.PIN0CTRL =
 3a0:	87 7c       	andi	r24, 0xC7	; 199
 3a2:	88 61       	ori	r24, 0x18	; 24
 3a4:	80 8b       	std	Z+16, r24	; 0x10
		(PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;   // Use the internal pull-up resistors on PORTC's TWI Ports.

	TWI_MasterInit(
 3a6:	25 e0       	ldi	r18, 0x05	; 5
 3a8:	40 e4       	ldi	r20, 0x40	; 64
 3aa:	60 e8       	ldi	r22, 0x80	; 128
 3ac:	74 e0       	ldi	r23, 0x04	; 4
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	90 e2       	ldi	r25, 0x20	; 32
 3b2:	c0 d0       	rcall	.+384    	; 0x534 <TWI_MasterInit>
		TWI_MASTER_INTLVL_LO_gc,
		TWI_BAUDSETTING
	);

	//PMIC.CTRL |= PMIC_LOLVLEN_bm;                               // Enable LO interrupt level.
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm; //0x07
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	e0 ea       	ldi	r30, 0xA0	; 160
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	82 83       	std	Z+2, r24	; 0x02
	sei();                                                      // Enable interrupts.
 3bc:	78 94       	sei

	PORTD.DIR = 0x01;                                           // Enable output on PortD0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 60 06 	sts	0x0660, r24

	TC0_ConfigWGM(&TCD0,TC_WGMODE_SS_gc);                       // Configure single slope mode.
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	99 e0       	ldi	r25, 0x09	; 9
 3ca:	64 df       	rcall	.-312    	; 0x294 <TC0_ConfigWGM>
	TC0_EnableCCChannels(&TCD0,TC0_CCAEN_bm);                   // Enable compare channel A.
 3cc:	60 e1       	ldi	r22, 0x10	; 16
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	99 e0       	ldi	r25, 0x09	; 9
 3d2:	66 df       	rcall	.-308    	; 0x2a0 <TC0_EnableCCChannels>
	TC0_ConfigClockSource(&TCD0,TC_CLKSEL_DIV1_gc);             // Start the timer by setting a clock source.
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	99 e0       	ldi	r25, 0x09	; 9
 3da:	56 df       	rcall	.-340    	; 0x288 <TC0_ConfigClockSource>

	TC_SetPeriod(&TCD0,TIMER_PERIOD);
 3dc:	e0 e0       	ldi	r30, 0x00	; 0
 3de:	f9 e0       	ldi	r31, 0x09	; 9
 3e0:	85 e8       	ldi	r24, 0x85	; 133
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	86 a3       	std	Z+38, r24	; 0x26
 3e6:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
 3e8:	82 e4       	ldi	r24, 0x42	; 66
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 af       	std	Z+56, r24	; 0x38
 3ee:	91 af       	std	Z+57, r25	; 0x39
	int i, j;
	int checkSum = 0;
	unsigned char mask = 0x01;

	// Initialize ADC
	adc_init();
 3f0:	25 df       	rcall	.-438    	; 0x23c <adc_init>
	PORTB_DIR = 0xFF;
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	80 93 20 06 	sts	0x0620, r24
	PORTA_DIR = 0x00;
 3f8:	10 92 00 06 	sts	0x0600, r1
	
	send_low();
 3fc:	67 df       	rcall	.-306    	; 0x2cc <send_low>
	
	while(1){
		// Start ADC conversion
		ADCA.CH0.CTRL |= 0x80;
 3fe:	e1 2c       	mov	r14, r1
 400:	68 94       	set
 402:	ff 24       	eor	r15, r15
 404:	f1 f8       	bld	r15, 1
			/* **************************************
			 * DEBUG: writes a one to Port B0 when
			 *        the ADC value is past the high
			 *        threshold
			 */
			PORTB_OUT = 0x01;
 406:	0f 2e       	mov	r0, r31
 408:	f4 e2       	ldi	r31, 0x24	; 36
 40a:	cf 2e       	mov	r12, r31
 40c:	f6 e0       	ldi	r31, 0x06	; 6
 40e:	df 2e       	mov	r13, r31
 410:	f0 2d       	mov	r31, r0
 412:	77 24       	eor	r7, r7
 414:	73 94       	inc	r7
			// Retrieve TWI communication to sensor
			TWI_MasterRead(
				&twiMaster,
				SLAVE_ADDRESS,
				TWIM_READ_BUFFER_SIZE);                    // Begin a TWI transaction.
			while (twiMaster.status != TWIM_STATUS_READY); // Wait until the transaction completes.
 416:	06 e1       	ldi	r16, 0x16	; 22
 418:	10 e2       	ldi	r17, 0x20	; 32
			*/
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
				for (j = 0; j < 8 ;j++) {
					if (twiMaster.readData[i] & (mask << j))
 41a:	aa 24       	eor	r10, r10
 41c:	a3 94       	inc	r10
 41e:	b1 2c       	mov	r11, r1
	
	send_low();
	
	while(1){
		// Start ADC conversion
		ADCA.CH0.CTRL |= 0x80;
 420:	f7 01       	movw	r30, r14
 422:	80 a1       	ldd	r24, Z+32	; 0x20
 424:	80 68       	ori	r24, 0x80	; 128
 426:	80 a3       	std	Z+32, r24	; 0x20

		// Check if enable flag was set high
		if (result_flag){
 428:	80 91 00 20 	lds	r24, 0x2000
 42c:	88 23       	and	r24, r24
 42e:	09 f4       	brne	.+2      	; 0x432 <main+0x9e>
 430:	4a c0       	rjmp	.+148    	; 0x4c6 <main+0x132>
			// Disable interrupts to send packet
			cli();
 432:	f8 94       	cli
			/* **************************************
			 * DEBUG: writes a one to Port B0 when
			 *        the ADC value is past the high
			 *        threshold
			 */
			PORTB_OUT = 0x01;
 434:	f6 01       	movw	r30, r12
 436:	70 82       	st	Z, r7
			/***************************************/
			
			// Retrieve TWI communication to sensor
			TWI_MasterRead(
 438:	44 e0       	ldi	r20, 0x04	; 4
 43a:	68 e2       	ldi	r22, 0x28	; 40
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	90 e2       	ldi	r25, 0x20	; 32
 440:	ce d0       	rcall	.+412    	; 0x5de <TWI_MasterRead>
				&twiMaster,
				SLAVE_ADDRESS,
				TWIM_READ_BUFFER_SIZE);                    // Begin a TWI transaction.
			while (twiMaster.status != TWIM_STATUS_READY); // Wait until the transaction completes.
 442:	f8 01       	movw	r30, r16
 444:	80 81       	ld	r24, Z
 446:	81 11       	cpse	r24, r1
 448:	fc cf       	rjmp	.-8      	; 0x442 <main+0xae>
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	c0 e0       	ldi	r28, 0x00	; 0
 450:	d0 e0       	ldi	r29, 0x00	; 0
 452:	18 c0       	rjmp	.+48     	; 0x484 <main+0xf0>
			*/
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
				for (j = 0; j < 8 ;j++) {
					if (twiMaster.readData[i] & (mask << j))
 454:	80 81       	ld	r24, Z
 456:	a5 01       	movw	r20, r10
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <main+0xcc>
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <main+0xc8>
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	84 23       	and	r24, r20
 468:	95 23       	and	r25, r21
 46a:	89 2b       	or	r24, r25
 46c:	09 f0       	breq	.+2      	; 0x470 <main+0xdc>
						checkSum += 1;
 46e:	21 96       	adiw	r28, 0x01	; 1
			}
			*/
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
				for (j = 0; j < 8 ;j++) {
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
 474:	28 30       	cpi	r18, 0x08	; 8
 476:	31 05       	cpc	r19, r1
 478:	69 f7       	brne	.-38     	; 0x454 <main+0xc0>
				tempData = (rawTempData[1]*64 + rawTempData[0]/4)/pow(2,14) * 165 -40;
			}
			*/
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	64 30       	cpi	r22, 0x04	; 4
 480:	71 05       	cpc	r23, r1
 482:	31 f0       	breq	.+12     	; 0x490 <main+0xfc>
}




int main(void){
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
			*/
			// Reset and then create packet checksum
			checkSum = 0;
			for (i = 0; i < 4; i++) {
				for (j = 0; j < 8 ;j++) {
					if (twiMaster.readData[i] & (mask << j))
 488:	fb 01       	movw	r30, r22
 48a:	e2 5f       	subi	r30, 0xF2	; 242
 48c:	ff 4d       	sbci	r31, 0xDF	; 223
 48e:	e2 cf       	rjmp	.-60     	; 0x454 <main+0xc0>
				}
			}
			
			// Clear input stream to iPhone then send start edge
			for (i = 0; i < 3; i++) {
				send_low();
 490:	1d df       	rcall	.-454    	; 0x2cc <send_low>
 492:	1c df       	rcall	.-456    	; 0x2cc <send_low>
 494:	1b df       	rcall	.-458    	; 0x2cc <send_low>
			}
			send_high();
 496:	0a df       	rcall	.-492    	; 0x2ac <send_high>
			
			// Send data
			for (i=TWIM_READ_BUFFER_SIZE-1; 0 <= i ;--i) {          // Iterate through the results.
 498:	0f 2e       	mov	r0, r31
 49a:	f3 e0       	ldi	r31, 0x03	; 3
 49c:	8f 2e       	mov	r8, r31
 49e:	91 2c       	mov	r9, r1
 4a0:	f0 2d       	mov	r31, r0
				send_byte_manchester(twiMaster.readData[i]);      // Send the data using Manchester encoding.
 4a2:	f4 01       	movw	r30, r8
 4a4:	ed 5f       	subi	r30, 0xFD	; 253
 4a6:	ff 4d       	sbci	r31, 0xDF	; 223
 4a8:	83 85       	ldd	r24, Z+11	; 0x0b
 4aa:	22 df       	rcall	.-444    	; 0x2f0 <send_byte_manchester>
				send_low();
			}
			send_high();
			
			// Send data
			for (i=TWIM_READ_BUFFER_SIZE-1; 0 <= i ;--i) {          // Iterate through the results.
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	8f 1a       	sub	r8, r31
 4b0:	91 08       	sbc	r9, r1
 4b2:	b8 f7       	brcc	.-18     	; 0x4a2 <main+0x10e>
				send_byte_manchester(twiMaster.readData[i]);      // Send the data using Manchester encoding.
			}
			
			// Send checksum
			send_byte_manchester(checkSum);
 4b4:	8c 2f       	mov	r24, r28
 4b6:	1c df       	rcall	.-456    	; 0x2f0 <send_byte_manchester>
			
			// Clear input buffer to iPhone with
			for (i = 0; i < 3; i++) {
				send_low();
 4b8:	09 df       	rcall	.-494    	; 0x2cc <send_low>
 4ba:	08 df       	rcall	.-496    	; 0x2cc <send_low>
 4bc:	07 df       	rcall	.-498    	; 0x2cc <send_low>
			}
			
			// Reset result_flag and Enable interrupts to check ADC
			result_flag = 0;
 4be:	10 92 00 20 	sts	0x2000, r1
			sei();
 4c2:	78 94       	sei
 4c4:	ad cf       	rjmp	.-166    	; 0x420 <main+0x8c>
			/* **************************************
			 * DEBUG: writes a zero to Port B0 when
			 *        the ADC value is below the high
			 *        threshold
			 */
			PORTB_OUT = 0x00;
 4c6:	f6 01       	movw	r30, r12
 4c8:	10 82       	st	Z, r1
 4ca:	aa cf       	rjmp	.-172    	; 0x420 <main+0x8c>

000004cc <__vector_13>:
	}
}


/*! TWIC Master Interrupt vector. */
ISR(TWIC_TWIM_vect){
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	08 b6       	in	r0, 0x38	; 56
 4d8:	0f 92       	push	r0
 4da:	18 be       	out	0x38, r1	; 56
 4dc:	09 b6       	in	r0, 0x39	; 57
 4de:	0f 92       	push	r0
 4e0:	19 be       	out	0x39, r1	; 57
 4e2:	0b b6       	in	r0, 0x3b	; 59
 4e4:	0f 92       	push	r0
 4e6:	1b be       	out	0x3b, r1	; 59
 4e8:	2f 93       	push	r18
 4ea:	3f 93       	push	r19
 4ec:	4f 93       	push	r20
 4ee:	5f 93       	push	r21
 4f0:	6f 93       	push	r22
 4f2:	7f 93       	push	r23
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	af 93       	push	r26
 4fa:	bf 93       	push	r27
 4fc:	ef 93       	push	r30
 4fe:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	90 e2       	ldi	r25, 0x20	; 32
 504:	ef d0       	rcall	.+478    	; 0x6e4 <TWI_MasterInterruptHandler>
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0b be       	out	0x3b, r0	; 59
 522:	0f 90       	pop	r0
 524:	09 be       	out	0x39, r0	; 57
 526:	0f 90       	pop	r0
 528:	08 be       	out	0x38, r0	; 56
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <TWI_MasterInit>:
 534:	fc 01       	movw	r30, r24
 536:	60 83       	st	Z, r22
 538:	71 83       	std	Z+1, r23	; 0x01
 53a:	48 63       	ori	r20, 0x38	; 56
 53c:	db 01       	movw	r26, r22
 53e:	11 96       	adiw	r26, 0x01	; 1
 540:	4c 93       	st	X, r20
 542:	a0 81       	ld	r26, Z
 544:	b1 81       	ldd	r27, Z+1	; 0x01
 546:	15 96       	adiw	r26, 0x05	; 5
 548:	2c 93       	st	X, r18
 54a:	01 90       	ld	r0, Z+
 54c:	f0 81       	ld	r31, Z
 54e:	e0 2d       	mov	r30, r0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	84 83       	std	Z+4, r24	; 0x04
 554:	08 95       	ret

00000556 <TWI_MasterWriteRead>:
 556:	0f 93       	push	r16
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	fc 01       	movw	r30, r24
 55e:	29 30       	cpi	r18, 0x09	; 9
 560:	98 f5       	brcc	.+102    	; 0x5c8 <TWI_MasterWriteRead+0x72>
 562:	05 30       	cpi	r16, 0x05	; 5
 564:	98 f5       	brcc	.+102    	; 0x5cc <TWI_MasterWriteRead+0x76>
 566:	83 89       	ldd	r24, Z+19	; 0x13
 568:	81 11       	cpse	r24, r1
 56a:	32 c0       	rjmp	.+100    	; 0x5d0 <TWI_MasterWriteRead+0x7a>
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	83 8b       	std	Z+19, r24	; 0x13
 570:	14 8a       	std	Z+20, r1	; 0x14
 572:	66 0f       	add	r22, r22
 574:	62 83       	std	Z+2, r22	; 0x02
 576:	22 23       	and	r18, r18
 578:	69 f0       	breq	.+26     	; 0x594 <TWI_MasterWriteRead+0x3e>
 57a:	a4 2f       	mov	r26, r20
 57c:	b5 2f       	mov	r27, r21
 57e:	40 e0       	ldi	r20, 0x00	; 0
 580:	50 e0       	ldi	r21, 0x00	; 0
 582:	8d 91       	ld	r24, X+
 584:	ef 01       	movw	r28, r30
 586:	c4 0f       	add	r28, r20
 588:	d5 1f       	adc	r29, r21
 58a:	8b 83       	std	Y+3, r24	; 0x03
 58c:	4f 5f       	subi	r20, 0xFF	; 255
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	42 17       	cp	r20, r18
 592:	b8 f3       	brcs	.-18     	; 0x582 <TWI_MasterWriteRead+0x2c>
 594:	27 87       	std	Z+15, r18	; 0x0f
 596:	00 8b       	std	Z+16, r16	; 0x10
 598:	11 8a       	std	Z+17, r1	; 0x11
 59a:	12 8a       	std	Z+18, r1	; 0x12
 59c:	87 85       	ldd	r24, Z+15	; 0x0f
 59e:	88 23       	and	r24, r24
 5a0:	41 f0       	breq	.+16     	; 0x5b2 <TWI_MasterWriteRead+0x5c>
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	8e 7f       	andi	r24, 0xFE	; 254
 5a6:	01 90       	ld	r0, Z+
 5a8:	f0 81       	ld	r31, Z
 5aa:	e0 2d       	mov	r30, r0
 5ac:	86 83       	std	Z+6, r24	; 0x06
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	12 c0       	rjmp	.+36     	; 0x5d6 <TWI_MasterWriteRead+0x80>
 5b2:	80 89       	ldd	r24, Z+16	; 0x10
 5b4:	88 23       	and	r24, r24
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <TWI_MasterWriteRead+0x7e>
 5b8:	82 81       	ldd	r24, Z+2	; 0x02
 5ba:	81 60       	ori	r24, 0x01	; 1
 5bc:	01 90       	ld	r0, Z+
 5be:	f0 81       	ld	r31, Z
 5c0:	e0 2d       	mov	r30, r0
 5c2:	86 83       	std	Z+6, r24	; 0x06
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <TWI_MasterWriteRead+0x80>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <TWI_MasterWriteRead+0x80>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <TWI_MasterWriteRead+0x80>
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <TWI_MasterWriteRead+0x80>
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	0f 91       	pop	r16
 5dc:	08 95       	ret

000005de <TWI_MasterRead>:
 5de:	0f 93       	push	r16
 5e0:	04 2f       	mov	r16, r20
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	b6 df       	rcall	.-148    	; 0x556 <TWI_MasterWriteRead>
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <TWI_MasterArbitrationLostBusErrorHandler>:
 5ee:	fc 01       	movw	r30, r24
 5f0:	a0 81       	ld	r26, Z
 5f2:	b1 81       	ldd	r27, Z+1	; 0x01
 5f4:	14 96       	adiw	r26, 0x04	; 4
 5f6:	8c 91       	ld	r24, X
 5f8:	14 97       	sbiw	r26, 0x04	; 4
 5fa:	82 ff       	sbrs	r24, 2
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
 5fe:	94 e0       	ldi	r25, 0x04	; 4
 600:	94 8b       	std	Z+20, r25	; 0x14
 602:	02 c0       	rjmp	.+4      	; 0x608 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
 604:	93 e0       	ldi	r25, 0x03	; 3
 606:	94 8b       	std	Z+20, r25	; 0x14
 608:	88 60       	ori	r24, 0x08	; 8
 60a:	14 96       	adiw	r26, 0x04	; 4
 60c:	8c 93       	st	X, r24
 60e:	13 8a       	std	Z+19, r1	; 0x13
 610:	08 95       	ret

00000612 <TWI_MasterTransactionFinished>:
 612:	fc 01       	movw	r30, r24
 614:	64 8b       	std	Z+20, r22	; 0x14
 616:	13 8a       	std	Z+19, r1	; 0x13
 618:	08 95       	ret

0000061a <TWI_MasterReadHandler>:
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	ec 01       	movw	r28, r24
 620:	8a 89       	ldd	r24, Y+18	; 0x12
 622:	84 30       	cpi	r24, 0x04	; 4
 624:	98 f4       	brcc	.+38     	; 0x64c <TWI_MasterReadHandler+0x32>
 626:	e0 e4       	ldi	r30, 0x40	; 64
 628:	f6 e0       	ldi	r31, 0x06	; 6
 62a:	80 81       	ld	r24, Z
 62c:	10 82       	st	Z, r1
 62e:	a8 81       	ld	r26, Y
 630:	b9 81       	ldd	r27, Y+1	; 0x01
 632:	17 96       	adiw	r26, 0x07	; 7
 634:	9c 91       	ld	r25, X
 636:	2a 89       	ldd	r18, Y+18	; 0x12
 638:	de 01       	movw	r26, r28
 63a:	a2 0f       	add	r26, r18
 63c:	b1 1d       	adc	r27, r1
 63e:	1b 96       	adiw	r26, 0x0b	; 11
 640:	9c 93       	st	X, r25
 642:	9a 89       	ldd	r25, Y+18	; 0x12
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	9a 8b       	std	Y+18, r25	; 0x12
 648:	80 83       	st	Z, r24
 64a:	07 c0       	rjmp	.+14     	; 0x65a <TWI_MasterReadHandler+0x40>
 64c:	e8 81       	ld	r30, Y
 64e:	f9 81       	ldd	r31, Y+1	; 0x01
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	83 83       	std	Z+3, r24	; 0x03
 654:	62 e0       	ldi	r22, 0x02	; 2
 656:	ce 01       	movw	r24, r28
 658:	dc df       	rcall	.-72     	; 0x612 <TWI_MasterTransactionFinished>
 65a:	98 89       	ldd	r25, Y+16	; 0x10
 65c:	8a 89       	ldd	r24, Y+18	; 0x12
 65e:	89 17       	cp	r24, r25
 660:	28 f4       	brcc	.+10     	; 0x66c <TWI_MasterReadHandler+0x52>
 662:	e8 81       	ld	r30, Y
 664:	f9 81       	ldd	r31, Y+1	; 0x01
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	83 83       	std	Z+3, r24	; 0x03
 66a:	07 c0       	rjmp	.+14     	; 0x67a <TWI_MasterReadHandler+0x60>
 66c:	e8 81       	ld	r30, Y
 66e:	f9 81       	ldd	r31, Y+1	; 0x01
 670:	87 e0       	ldi	r24, 0x07	; 7
 672:	83 83       	std	Z+3, r24	; 0x03
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	ce 01       	movw	r24, r28
 678:	cc df       	rcall	.-104    	; 0x612 <TWI_MasterTransactionFinished>
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <TWI_MasterWriteHandler>:
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	fc 01       	movw	r30, r24
 686:	97 85       	ldd	r25, Z+15	; 0x0f
 688:	20 89       	ldd	r18, Z+16	; 0x10
 68a:	a0 81       	ld	r26, Z
 68c:	b1 81       	ldd	r27, Z+1	; 0x01
 68e:	14 96       	adiw	r26, 0x04	; 4
 690:	8c 91       	ld	r24, X
 692:	14 97       	sbiw	r26, 0x04	; 4
 694:	84 ff       	sbrs	r24, 4
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <TWI_MasterWriteHandler+0x26>
 698:	83 e0       	ldi	r24, 0x03	; 3
 69a:	13 96       	adiw	r26, 0x03	; 3
 69c:	8c 93       	st	X, r24
 69e:	85 e0       	ldi	r24, 0x05	; 5
 6a0:	84 8b       	std	Z+20, r24	; 0x14
 6a2:	13 8a       	std	Z+19, r1	; 0x13
 6a4:	1c c0       	rjmp	.+56     	; 0x6de <TWI_MasterWriteHandler+0x5e>
 6a6:	81 89       	ldd	r24, Z+17	; 0x11
 6a8:	89 17       	cp	r24, r25
 6aa:	58 f4       	brcc	.+22     	; 0x6c2 <TWI_MasterWriteHandler+0x42>
 6ac:	81 89       	ldd	r24, Z+17	; 0x11
 6ae:	ef 01       	movw	r28, r30
 6b0:	c8 0f       	add	r28, r24
 6b2:	d1 1d       	adc	r29, r1
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
 6b6:	17 96       	adiw	r26, 0x07	; 7
 6b8:	8c 93       	st	X, r24
 6ba:	81 89       	ldd	r24, Z+17	; 0x11
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	81 8b       	std	Z+17, r24	; 0x11
 6c0:	0e c0       	rjmp	.+28     	; 0x6de <TWI_MasterWriteHandler+0x5e>
 6c2:	82 89       	ldd	r24, Z+18	; 0x12
 6c4:	82 17       	cp	r24, r18
 6c6:	28 f4       	brcc	.+10     	; 0x6d2 <TWI_MasterWriteHandler+0x52>
 6c8:	82 81       	ldd	r24, Z+2	; 0x02
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	16 96       	adiw	r26, 0x06	; 6
 6ce:	8c 93       	st	X, r24
 6d0:	06 c0       	rjmp	.+12     	; 0x6de <TWI_MasterWriteHandler+0x5e>
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	13 96       	adiw	r26, 0x03	; 3
 6d6:	8c 93       	st	X, r24
 6d8:	61 e0       	ldi	r22, 0x01	; 1
 6da:	cf 01       	movw	r24, r30
 6dc:	9a df       	rcall	.-204    	; 0x612 <TWI_MasterTransactionFinished>
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <TWI_MasterInterruptHandler>:
 6e4:	dc 01       	movw	r26, r24
 6e6:	ed 91       	ld	r30, X+
 6e8:	fc 91       	ld	r31, X
 6ea:	24 81       	ldd	r18, Z+4	; 0x04
 6ec:	32 2f       	mov	r19, r18
 6ee:	3c 70       	andi	r19, 0x0C	; 12
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <TWI_MasterInterruptHandler+0x10>
 6f2:	7d cf       	rjmp	.-262    	; 0x5ee <TWI_MasterArbitrationLostBusErrorHandler>
 6f4:	26 ff       	sbrs	r18, 6
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <TWI_MasterInterruptHandler+0x16>
 6f8:	c3 cf       	rjmp	.-122    	; 0x680 <TWI_MasterWriteHandler>
 6fa:	22 23       	and	r18, r18
 6fc:	0c f4       	brge	.+2      	; 0x700 <TWI_MasterInterruptHandler+0x1c>
 6fe:	8d cf       	rjmp	.-230    	; 0x61a <TWI_MasterReadHandler>
 700:	66 e0       	ldi	r22, 0x06	; 6
 702:	87 cf       	rjmp	.-242    	; 0x612 <TWI_MasterTransactionFinished>

00000704 <_exit>:
 704:	f8 94       	cli

00000706 <__stop_program>:
 706:	ff cf       	rjmp	.-2      	; 0x706 <__stop_program>


TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  0000050e  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00802000  00802000  000005a2  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001622  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000069f  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c15  00000000  00000000  00002b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000254  00000000  00000000  00003754  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a1d  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b62  00000000  00000000  000043c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  00004f27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c1       	rjmp	.+668    	; 0x2d2 <__vector_13>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
 162:	00 00       	nop
 164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e0       	ldi	r30, 0x0E	; 14
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a5 31       	cpi	r26, 0x15	; 21
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	02 d0       	rcall	.+4      	; 0x246 <main>
 242:	63 c1       	rjmp	.+710    	; 0x50a <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <main>:
 *
 *  Example code that reads the key pressed and show a value from the buffer,
 *  sends the value to the slave and read back the processed value which will
 *  be inverted and displayed after key release.
 */
int main(void){
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
	/* Initialize PORTE for output and PORTD for inverted input. */
	
	PORTA_DIR = 0xFF; // Set PORTA to be an output for LEDS
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d6 e0       	ldi	r29, 0x06	; 6
 250:	1f ef       	ldi	r17, 0xFF	; 255
 252:	18 83       	st	Y, r17
	//Enable internal pull-up on PC0, PC1.. Uncomment if you don't have external pullups
	//PORTCFG.MPCMASK = 0x03; // Configure several PINxCTRL registers at the same time
	//PORTC.PIN0CTRL = (PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc; //Enable pull-up to get a defined level on the switches

	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
 254:	25 e0       	ldi	r18, 0x05	; 5
 256:	40 e4       	ldi	r20, 0x40	; 64
 258:	60 e8       	ldi	r22, 0x80	; 128
 25a:	74 e0       	ldi	r23, 0x04	; 4
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e2       	ldi	r25, 0x20	; 32
 260:	6c d0       	rcall	.+216    	; 0x33a <TWI_MasterInit>
	               &TWIC,
	               TWI_MASTER_INTLVL_LO_gc,
	               TWI_BAUDSETTING);

	/* Enable LO interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm; // PMIC controls the handling and prioritizing of interrupt requests    <----------
 262:	e0 ea       	ldi	r30, 0xA0	; 160
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	82 81       	ldd	r24, Z+2	; 0x02
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	82 83       	std	Z+2, r24	; 0x02
	sei(); // enables interrupts   <-----------
 26c:	78 94       	sei
	
	PORTA_DIR = 0xFF;
 26e:	18 83       	st	Y, r17
	}	
	*/

	//while(1){
		
			TWI_MasterRead(&twiMaster, SLAVE_ADDRESS, 4);
 270:	44 e0       	ldi	r20, 0x04	; 4
 272:	68 e2       	ldi	r22, 0x28	; 40
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e2       	ldi	r25, 0x20	; 32
 278:	b5 d0       	rcall	.+362    	; 0x3e4 <TWI_MasterRead>
			while (twiMaster.status != TWIM_STATUS_READY) {}; // Wait until transaction is complete.
 27a:	e3 e1       	ldi	r30, 0x13	; 19
 27c:	f0 e2       	ldi	r31, 0x20	; 32
 27e:	80 81       	ld	r24, Z
 280:	81 11       	cpse	r24, r1
 282:	fd cf       	rjmp	.-6      	; 0x27e <main+0x38>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
			
			int i = 0;
			for (i=0; i!=4; i++){
				PORTA_OUT = twiMaster.readData[i];
 288:	e4 e0       	ldi	r30, 0x04	; 4
 28a:	f6 e0       	ldi	r31, 0x06	; 6
 28c:	dc 01       	movw	r26, r24
 28e:	a0 50       	subi	r26, 0x00	; 0
 290:	b0 4e       	sbci	r27, 0xE0	; 224
 292:	1b 96       	adiw	r26, 0x0b	; 11
 294:	2c 91       	ld	r18, X
 296:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	2f e3       	ldi	r18, 0x3F	; 63
 29a:	3d e0       	ldi	r19, 0x0D	; 13
 29c:	43 e0       	ldi	r20, 0x03	; 3
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	30 40       	sbci	r19, 0x00	; 0
 2a2:	40 40       	sbci	r20, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x58>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x62>
 2a8:	00 00       	nop
				_delay_ms(500);
				PORTA_OUT = 0x00;
 2aa:	10 82       	st	Z, r1
 2ac:	2f e3       	ldi	r18, 0x3F	; 63
 2ae:	3d e0       	ldi	r19, 0x0D	; 13
 2b0:	43 e0       	ldi	r20, 0x03	; 3
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	30 40       	sbci	r19, 0x00	; 0
 2b6:	40 40       	sbci	r20, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x6c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x76>
 2bc:	00 00       	nop
		
			TWI_MasterRead(&twiMaster, SLAVE_ADDRESS, 4);
			while (twiMaster.status != TWIM_STATUS_READY) {}; // Wait until transaction is complete.
			
			int i = 0;
			for (i=0; i!=4; i++){
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	84 30       	cpi	r24, 0x04	; 4
 2c2:	91 05       	cpc	r25, r1
 2c4:	19 f7       	brne	.-58     	; 0x28c <main+0x46>
				PORTA_OUT = 0x00;
				_delay_ms(500);
			}

	//} /* execution loop */
}
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	08 95       	ret

000002d2 <__vector_13>:

/*! TWIC Master Interrupt vector. */
ISR(TWIC_TWIM_vect){
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	08 b6       	in	r0, 0x38	; 56
 2de:	0f 92       	push	r0
 2e0:	18 be       	out	0x38, r1	; 56
 2e2:	09 b6       	in	r0, 0x39	; 57
 2e4:	0f 92       	push	r0
 2e6:	19 be       	out	0x39, r1	; 57
 2e8:	0b b6       	in	r0, 0x3b	; 59
 2ea:	0f 92       	push	r0
 2ec:	1b be       	out	0x3b, r1	; 59
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e2       	ldi	r25, 0x20	; 32
 30a:	ef d0       	rcall	.+478    	; 0x4ea <TWI_MasterInterruptHandler>
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0b be       	out	0x3b, r0	; 59
 328:	0f 90       	pop	r0
 32a:	09 be       	out	0x39, r0	; 57
 32c:	0f 90       	pop	r0
 32e:	08 be       	out	0x38, r0	; 56
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <TWI_MasterInit>:
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
	return twi_status;
}
 33a:	fc 01       	movw	r30, r24
 33c:	60 83       	st	Z, r22
 33e:	71 83       	std	Z+1, r23	; 0x01
 340:	48 63       	ori	r20, 0x38	; 56
 342:	db 01       	movw	r26, r22
 344:	11 96       	adiw	r26, 0x01	; 1
 346:	4c 93       	st	X, r20
 348:	a0 81       	ld	r26, Z
 34a:	b1 81       	ldd	r27, Z+1	; 0x01
 34c:	15 96       	adiw	r26, 0x05	; 5
 34e:	2c 93       	st	X, r18
 350:	01 90       	ld	r0, Z+
 352:	f0 81       	ld	r31, Z
 354:	e0 2d       	mov	r30, r0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	84 83       	std	Z+4, r24	; 0x04
 35a:	08 95       	ret

0000035c <TWI_MasterWriteRead>:
 35c:	0f 93       	push	r16
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	fc 01       	movw	r30, r24
 364:	29 30       	cpi	r18, 0x09	; 9
 366:	98 f5       	brcc	.+102    	; 0x3ce <TWI_MasterWriteRead+0x72>
 368:	05 30       	cpi	r16, 0x05	; 5
 36a:	98 f5       	brcc	.+102    	; 0x3d2 <TWI_MasterWriteRead+0x76>
 36c:	83 89       	ldd	r24, Z+19	; 0x13
 36e:	81 11       	cpse	r24, r1
 370:	32 c0       	rjmp	.+100    	; 0x3d6 <TWI_MasterWriteRead+0x7a>
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	83 8b       	std	Z+19, r24	; 0x13
 376:	14 8a       	std	Z+20, r1	; 0x14
 378:	66 0f       	add	r22, r22
 37a:	62 83       	std	Z+2, r22	; 0x02
 37c:	22 23       	and	r18, r18
 37e:	69 f0       	breq	.+26     	; 0x39a <TWI_MasterWriteRead+0x3e>
 380:	a4 2f       	mov	r26, r20
 382:	b5 2f       	mov	r27, r21
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	8d 91       	ld	r24, X+
 38a:	ef 01       	movw	r28, r30
 38c:	c4 0f       	add	r28, r20
 38e:	d5 1f       	adc	r29, r21
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	4f 5f       	subi	r20, 0xFF	; 255
 394:	5f 4f       	sbci	r21, 0xFF	; 255
 396:	42 17       	cp	r20, r18
 398:	b8 f3       	brcs	.-18     	; 0x388 <TWI_MasterWriteRead+0x2c>
 39a:	27 87       	std	Z+15, r18	; 0x0f
 39c:	00 8b       	std	Z+16, r16	; 0x10
 39e:	11 8a       	std	Z+17, r1	; 0x11
 3a0:	12 8a       	std	Z+18, r1	; 0x12
 3a2:	87 85       	ldd	r24, Z+15	; 0x0f
 3a4:	88 23       	and	r24, r24
 3a6:	41 f0       	breq	.+16     	; 0x3b8 <TWI_MasterWriteRead+0x5c>
 3a8:	82 81       	ldd	r24, Z+2	; 0x02
 3aa:	8e 7f       	andi	r24, 0xFE	; 254
 3ac:	01 90       	ld	r0, Z+
 3ae:	f0 81       	ld	r31, Z
 3b0:	e0 2d       	mov	r30, r0
 3b2:	86 83       	std	Z+6, r24	; 0x06
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	12 c0       	rjmp	.+36     	; 0x3dc <TWI_MasterWriteRead+0x80>
 3b8:	80 89       	ldd	r24, Z+16	; 0x10
 3ba:	88 23       	and	r24, r24
 3bc:	71 f0       	breq	.+28     	; 0x3da <TWI_MasterWriteRead+0x7e>
 3be:	82 81       	ldd	r24, Z+2	; 0x02
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	01 90       	ld	r0, Z+
 3c4:	f0 81       	ld	r31, Z
 3c6:	e0 2d       	mov	r30, r0
 3c8:	86 83       	std	Z+6, r24	; 0x06
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <TWI_MasterWriteRead+0x80>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <TWI_MasterWriteRead+0x80>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <TWI_MasterWriteRead+0x80>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <TWI_MasterWriteRead+0x80>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	0f 91       	pop	r16
 3e2:	08 95       	ret

000003e4 <TWI_MasterRead>:
 3e4:	0f 93       	push	r16
 3e6:	04 2f       	mov	r16, r20
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	b6 df       	rcall	.-148    	; 0x35c <TWI_MasterWriteRead>
 3f0:	0f 91       	pop	r16
 3f2:	08 95       	ret

000003f4 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 3f4:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 3f6:	a0 81       	ld	r26, Z
 3f8:	b1 81       	ldd	r27, Z+1	; 0x01
 3fa:	14 96       	adiw	r26, 0x04	; 4
 3fc:	8c 91       	ld	r24, X
 3fe:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 400:	82 ff       	sbrs	r24, 2
 402:	03 c0       	rjmp	.+6      	; 0x40a <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 404:	94 e0       	ldi	r25, 0x04	; 4
 406:	94 8b       	std	Z+20, r25	; 0x14
 408:	02 c0       	rjmp	.+4      	; 0x40e <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 40a:	93 e0       	ldi	r25, 0x03	; 3
 40c:	94 8b       	std	Z+20, r25	; 0x14
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 40e:	88 60       	ori	r24, 0x08	; 8
 410:	14 96       	adiw	r26, 0x04	; 4
 412:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
 414:	13 8a       	std	Z+19, r1	; 0x13
 416:	08 95       	ret

00000418 <TWI_MasterTransactionFinished>:
 *
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result){
	twi->result = result;
 418:	fc 01       	movw	r30, r24
 41a:	64 8b       	std	Z+20, r22	; 0x14
	twi->status = TWIM_STATUS_READY;
 41c:	13 8a       	std	Z+19, r1	; 0x13
 41e:	08 95       	ret

00000420 <TWI_MasterReadHandler>:
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi){
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24

	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 426:	8a 89       	ldd	r24, Y+18	; 0x12
 428:	84 30       	cpi	r24, 0x04	; 4
 42a:	98 f4       	brcc	.+38     	; 0x452 <TWI_MasterReadHandler+0x32>
		char temp = PORTC_DIR; // added
 42c:	e0 e4       	ldi	r30, 0x40	; 64
 42e:	f6 e0       	ldi	r31, 0x06	; 6
 430:	80 81       	ld	r24, Z
		PORTC_DIR = 0x00; // added
 432:	10 82       	st	Z, r1
		uint8_t data = twi->interface->MASTER.DATA;
 434:	a8 81       	ld	r26, Y
 436:	b9 81       	ldd	r27, Y+1	; 0x01
 438:	17 96       	adiw	r26, 0x07	; 7
 43a:	9c 91       	ld	r25, X
		twi->readData[twi->bytesRead] = data;
 43c:	2a 89       	ldd	r18, Y+18	; 0x12
 43e:	de 01       	movw	r26, r28
 440:	a2 0f       	add	r26, r18
 442:	b1 1d       	adc	r27, r1
 444:	1b 96       	adiw	r26, 0x0b	; 11
 446:	9c 93       	st	X, r25
		twi->bytesRead++;
 448:	9a 89       	ldd	r25, Y+18	; 0x12
 44a:	9f 5f       	subi	r25, 0xFF	; 255
 44c:	9a 8b       	std	Y+18, r25	; 0x12
		PORTC_DIR = temp; // added
 44e:	80 83       	st	Z, r24
 450:	07 c0       	rjmp	.+14     	; 0x460 <TWI_MasterReadHandler+0x40>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 452:	e8 81       	ld	r30, Y
 454:	f9 81       	ldd	r31, Y+1	; 0x01
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	83 83       	std	Z+3, r24	; 0x03
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
 45a:	62 e0       	ldi	r22, 0x02	; 2
 45c:	ce 01       	movw	r24, r28
 45e:	dc df       	rcall	.-72     	; 0x418 <TWI_MasterTransactionFinished>
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 460:	98 89       	ldd	r25, Y+16	; 0x10

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 462:	8a 89       	ldd	r24, Y+18	; 0x12
 464:	89 17       	cp	r24, r25
 466:	28 f4       	brcc	.+10     	; 0x472 <TWI_MasterReadHandler+0x52>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 468:	e8 81       	ld	r30, Y
 46a:	f9 81       	ldd	r31, Y+1	; 0x01
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	83 83       	std	Z+3, r24	; 0x03
 470:	07 c0       	rjmp	.+14     	; 0x480 <TWI_MasterReadHandler+0x60>
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 472:	e8 81       	ld	r30, Y
 474:	f9 81       	ldd	r31, Y+1	; 0x01
 476:	87 e0       	ldi	r24, 0x07	; 7
 478:	83 83       	std	Z+3, r24	; 0x03
		                               TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	ce 01       	movw	r24, r28
 47e:	cc df       	rcall	.-104    	; 0x418 <TWI_MasterTransactionFinished>
	}
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 48c:	97 85       	ldd	r25, Z+15	; 0x0f
	uint8_t bytesToRead   = twi->bytesToRead;
 48e:	20 89       	ldd	r18, Z+16	; 0x10

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 490:	a0 81       	ld	r26, Z
 492:	b1 81       	ldd	r27, Z+1	; 0x01
 494:	14 96       	adiw	r26, 0x04	; 4
 496:	8c 91       	ld	r24, X
 498:	14 97       	sbiw	r26, 0x04	; 4
 49a:	84 ff       	sbrs	r24, 4
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	13 96       	adiw	r26, 0x03	; 3
 4a2:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 4a4:	85 e0       	ldi	r24, 0x05	; 5
 4a6:	84 8b       	std	Z+20, r24	; 0x14
		twi->status = TWIM_STATUS_READY;
 4a8:	13 8a       	std	Z+19, r1	; 0x13
 4aa:	1c c0       	rjmp	.+56     	; 0x4e4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 4ac:	81 89       	ldd	r24, Z+17	; 0x11
 4ae:	89 17       	cp	r24, r25
 4b0:	58 f4       	brcc	.+22     	; 0x4c8 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 4b2:	81 89       	ldd	r24, Z+17	; 0x11
 4b4:	ef 01       	movw	r28, r30
 4b6:	c8 0f       	add	r28, r24
 4b8:	d1 1d       	adc	r29, r1
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 4bc:	17 96       	adiw	r26, 0x07	; 7
 4be:	8c 93       	st	X, r24
		++twi->bytesWritten;
 4c0:	81 89       	ldd	r24, Z+17	; 0x11
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	81 8b       	std	Z+17, r24	; 0x11
 4c6:	0e c0       	rjmp	.+28     	; 0x4e4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 4c8:	82 89       	ldd	r24, Z+18	; 0x12
 4ca:	82 17       	cp	r24, r18
 4cc:	28 f4       	brcc	.+10     	; 0x4d8 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 4ce:	82 81       	ldd	r24, Z+2	; 0x02
 4d0:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 4d2:	16 96       	adiw	r26, 0x06	; 6
 4d4:	8c 93       	st	X, r24
 4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	13 96       	adiw	r26, 0x03	; 3
 4dc:	8c 93       	st	X, r24
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	cf 01       	movw	r24, r30
 4e2:	9a df       	rcall	.-204    	; 0x418 <TWI_MasterTransactionFinished>
	}
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 4ea:	dc 01       	movw	r26, r24
 4ec:	ed 91       	ld	r30, X+
 4ee:	fc 91       	ld	r31, X
 4f0:	24 81       	ldd	r18, Z+4	; 0x04
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
 4f2:	32 2f       	mov	r19, r18
 4f4:	3c 70       	andi	r19, 0x0C	; 12
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 4f6:	09 f0       	breq	.+2      	; 0x4fa <TWI_MasterInterruptHandler+0x10>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 4f8:	7d cf       	rjmp	.-262    	; 0x3f4 <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 4fa:	26 ff       	sbrs	r18, 6
 4fc:	01 c0       	rjmp	.+2      	; 0x500 <TWI_MasterInterruptHandler+0x16>
		TWI_MasterWriteHandler(twi);
 4fe:	c3 cf       	rjmp	.-122    	; 0x486 <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 500:	22 23       	and	r18, r18
 502:	0c f4       	brge	.+2      	; 0x506 <TWI_MasterInterruptHandler+0x1c>
		TWI_MasterReadHandler(twi);
 504:	8d cf       	rjmp	.-230    	; 0x420 <TWI_MasterReadHandler>
	}

	/* If unexpected state. */
	else {
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_FAIL);
 506:	66 e0       	ldi	r22, 0x06	; 6
 508:	87 cf       	rjmp	.-242    	; 0x418 <TWI_MasterTransactionFinished>

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>


TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00802000  00802000  000005c8  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d73  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001f0  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000334f  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007da  00000000  00000000  000042e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f5e  00000000  00000000  00004abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000448  00000000  00000000  00005a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016a8  00000000  00000000  00005e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f9b  00000000  00000000  0000750c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  000084a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__bad_interrupt>
   6:	00 00       	nop
   8:	0f c1       	rjmp	.+542    	; 0x228 <__bad_interrupt>
   a:	00 00       	nop
   c:	0d c1       	rjmp	.+538    	; 0x228 <__bad_interrupt>
   e:	00 00       	nop
  10:	0b c1       	rjmp	.+534    	; 0x228 <__bad_interrupt>
  12:	00 00       	nop
  14:	09 c1       	rjmp	.+530    	; 0x228 <__bad_interrupt>
  16:	00 00       	nop
  18:	07 c1       	rjmp	.+526    	; 0x228 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	05 c1       	rjmp	.+522    	; 0x228 <__bad_interrupt>
  1e:	00 00       	nop
  20:	03 c1       	rjmp	.+518    	; 0x228 <__bad_interrupt>
  22:	00 00       	nop
  24:	01 c1       	rjmp	.+514    	; 0x228 <__bad_interrupt>
  26:	00 00       	nop
  28:	ff c0       	rjmp	.+510    	; 0x228 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fd c0       	rjmp	.+506    	; 0x228 <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c0       	rjmp	.+502    	; 0x228 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c1       	rjmp	.+858    	; 0x390 <__vector_13>
  36:	00 00       	nop
  38:	f7 c0       	rjmp	.+494    	; 0x228 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f5 c0       	rjmp	.+490    	; 0x228 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f3 c0       	rjmp	.+486    	; 0x228 <__bad_interrupt>
  42:	00 00       	nop
  44:	f1 c0       	rjmp	.+482    	; 0x228 <__bad_interrupt>
  46:	00 00       	nop
  48:	ef c0       	rjmp	.+478    	; 0x228 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ed c0       	rjmp	.+474    	; 0x228 <__bad_interrupt>
  4e:	00 00       	nop
  50:	eb c0       	rjmp	.+470    	; 0x228 <__bad_interrupt>
  52:	00 00       	nop
  54:	e9 c0       	rjmp	.+466    	; 0x228 <__bad_interrupt>
  56:	00 00       	nop
  58:	e7 c0       	rjmp	.+462    	; 0x228 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e5 c0       	rjmp	.+458    	; 0x228 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e3 c0       	rjmp	.+454    	; 0x228 <__bad_interrupt>
  62:	00 00       	nop
  64:	e1 c0       	rjmp	.+450    	; 0x228 <__bad_interrupt>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	dd c0       	rjmp	.+442    	; 0x228 <__bad_interrupt>
  6e:	00 00       	nop
  70:	db c0       	rjmp	.+438    	; 0x228 <__bad_interrupt>
  72:	00 00       	nop
  74:	d9 c0       	rjmp	.+434    	; 0x228 <__bad_interrupt>
  76:	00 00       	nop
  78:	d7 c0       	rjmp	.+430    	; 0x228 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d5 c0       	rjmp	.+426    	; 0x228 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d3 c0       	rjmp	.+422    	; 0x228 <__bad_interrupt>
  82:	00 00       	nop
  84:	d1 c0       	rjmp	.+418    	; 0x228 <__bad_interrupt>
  86:	00 00       	nop
  88:	cf c0       	rjmp	.+414    	; 0x228 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cd c0       	rjmp	.+410    	; 0x228 <__bad_interrupt>
  8e:	00 00       	nop
  90:	cb c0       	rjmp	.+406    	; 0x228 <__bad_interrupt>
  92:	00 00       	nop
  94:	c9 c0       	rjmp	.+402    	; 0x228 <__bad_interrupt>
  96:	00 00       	nop
  98:	c7 c0       	rjmp	.+398    	; 0x228 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c5 c0       	rjmp	.+394    	; 0x228 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c3 c0       	rjmp	.+390    	; 0x228 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c1 c0       	rjmp	.+386    	; 0x228 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bf c0       	rjmp	.+382    	; 0x228 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	bd c0       	rjmp	.+378    	; 0x228 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	bb c0       	rjmp	.+374    	; 0x228 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b9 c0       	rjmp	.+370    	; 0x228 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b7 c0       	rjmp	.+366    	; 0x228 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b5 c0       	rjmp	.+362    	; 0x228 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b3 c0       	rjmp	.+358    	; 0x228 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	af c0       	rjmp	.+350    	; 0x228 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ad c0       	rjmp	.+346    	; 0x228 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	ab c0       	rjmp	.+342    	; 0x228 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a9 c0       	rjmp	.+338    	; 0x228 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a7 c0       	rjmp	.+334    	; 0x228 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a3 c0       	rjmp	.+326    	; 0x228 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a1 c0       	rjmp	.+322    	; 0x228 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	9f c0       	rjmp	.+318    	; 0x228 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	9d c0       	rjmp	.+314    	; 0x228 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	9b c0       	rjmp	.+310    	; 0x228 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	99 c0       	rjmp	.+306    	; 0x228 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	97 c0       	rjmp	.+302    	; 0x228 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	95 c0       	rjmp	.+298    	; 0x228 <__bad_interrupt>
  fe:	00 00       	nop
 100:	93 c0       	rjmp	.+294    	; 0x228 <__bad_interrupt>
 102:	00 00       	nop
 104:	91 c0       	rjmp	.+290    	; 0x228 <__bad_interrupt>
 106:	00 00       	nop
 108:	8f c0       	rjmp	.+286    	; 0x228 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	8d c0       	rjmp	.+282    	; 0x228 <__bad_interrupt>
 10e:	00 00       	nop
 110:	8b c0       	rjmp	.+278    	; 0x228 <__bad_interrupt>
 112:	00 00       	nop
 114:	89 c0       	rjmp	.+274    	; 0x228 <__bad_interrupt>
 116:	00 00       	nop
 118:	87 c0       	rjmp	.+270    	; 0x228 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	85 c0       	rjmp	.+266    	; 0x228 <__bad_interrupt>
 11e:	00 00       	nop
 120:	83 c0       	rjmp	.+262    	; 0x228 <__bad_interrupt>
 122:	00 00       	nop
 124:	81 c0       	rjmp	.+258    	; 0x228 <__bad_interrupt>
 126:	00 00       	nop
 128:	7f c0       	rjmp	.+254    	; 0x228 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	7d c0       	rjmp	.+250    	; 0x228 <__bad_interrupt>
 12e:	00 00       	nop
 130:	7b c0       	rjmp	.+246    	; 0x228 <__bad_interrupt>
 132:	00 00       	nop
 134:	79 c0       	rjmp	.+242    	; 0x228 <__bad_interrupt>
 136:	00 00       	nop
 138:	77 c0       	rjmp	.+238    	; 0x228 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	75 c0       	rjmp	.+234    	; 0x228 <__bad_interrupt>
 13e:	00 00       	nop
 140:	73 c0       	rjmp	.+230    	; 0x228 <__bad_interrupt>
 142:	00 00       	nop
 144:	71 c0       	rjmp	.+226    	; 0x228 <__bad_interrupt>
 146:	00 00       	nop
 148:	6f c0       	rjmp	.+222    	; 0x228 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	6d c0       	rjmp	.+218    	; 0x228 <__bad_interrupt>
 14e:	00 00       	nop
 150:	6b c0       	rjmp	.+214    	; 0x228 <__bad_interrupt>
 152:	00 00       	nop
 154:	69 c0       	rjmp	.+210    	; 0x228 <__bad_interrupt>
 156:	00 00       	nop
 158:	67 c0       	rjmp	.+206    	; 0x228 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	65 c0       	rjmp	.+202    	; 0x228 <__bad_interrupt>
 15e:	00 00       	nop
 160:	63 c0       	rjmp	.+198    	; 0x228 <__bad_interrupt>
 162:	00 00       	nop
 164:	61 c0       	rjmp	.+194    	; 0x228 <__bad_interrupt>
 166:	00 00       	nop
 168:	5f c0       	rjmp	.+190    	; 0x228 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	5d c0       	rjmp	.+186    	; 0x228 <__bad_interrupt>
 16e:	00 00       	nop
 170:	5b c0       	rjmp	.+182    	; 0x228 <__bad_interrupt>
 172:	00 00       	nop
 174:	59 c0       	rjmp	.+178    	; 0x228 <__bad_interrupt>
 176:	00 00       	nop
 178:	57 c0       	rjmp	.+174    	; 0x228 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	55 c0       	rjmp	.+170    	; 0x228 <__bad_interrupt>
 17e:	00 00       	nop
 180:	53 c0       	rjmp	.+166    	; 0x228 <__bad_interrupt>
 182:	00 00       	nop
 184:	51 c0       	rjmp	.+162    	; 0x228 <__bad_interrupt>
 186:	00 00       	nop
 188:	4f c0       	rjmp	.+158    	; 0x228 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	4d c0       	rjmp	.+154    	; 0x228 <__bad_interrupt>
 18e:	00 00       	nop
 190:	4b c0       	rjmp	.+150    	; 0x228 <__bad_interrupt>
 192:	00 00       	nop
 194:	49 c0       	rjmp	.+146    	; 0x228 <__bad_interrupt>
 196:	00 00       	nop
 198:	47 c0       	rjmp	.+142    	; 0x228 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	45 c0       	rjmp	.+138    	; 0x228 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	43 c0       	rjmp	.+134    	; 0x228 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	41 c0       	rjmp	.+130    	; 0x228 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	3f c0       	rjmp	.+126    	; 0x228 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	3d c0       	rjmp	.+122    	; 0x228 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	3b c0       	rjmp	.+118    	; 0x228 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	39 c0       	rjmp	.+114    	; 0x228 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	37 c0       	rjmp	.+110    	; 0x228 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	35 c0       	rjmp	.+106    	; 0x228 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	33 c0       	rjmp	.+102    	; 0x228 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	31 c0       	rjmp	.+98     	; 0x228 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	2f c0       	rjmp	.+94     	; 0x228 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	2d c0       	rjmp	.+90     	; 0x228 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	2b c0       	rjmp	.+86     	; 0x228 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	29 c0       	rjmp	.+82     	; 0x228 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	25 c0       	rjmp	.+74     	; 0x228 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	23 c0       	rjmp	.+70     	; 0x228 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	21 c0       	rjmp	.+66     	; 0x228 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	1f c0       	rjmp	.+62     	; 0x228 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	19 c0       	rjmp	.+50     	; 0x228 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	17 c0       	rjmp	.+46     	; 0x228 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a5 31       	cpi	r26, 0x15	; 21
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	5c d0       	rcall	.+184    	; 0x2de <main>
 226:	84 c1       	rjmp	.+776    	; 0x530 <_exit>

00000228 <__bad_interrupt>:
 228:	eb ce       	rjmp	.-554    	; 0x0 <__vectors>

0000022a <TC0_ConfigClockSource>:
 22a:	fc 01       	movw	r30, r24
 22c:	20 81       	ld	r18, Z
 22e:	20 7f       	andi	r18, 0xF0	; 240
 230:	62 2b       	or	r22, r18
 232:	60 83       	st	Z, r22
 234:	08 95       	ret

00000236 <TC0_ConfigWGM>:
 236:	fc 01       	movw	r30, r24
 238:	21 81       	ldd	r18, Z+1	; 0x01
 23a:	28 7f       	andi	r18, 0xF8	; 248
 23c:	62 2b       	or	r22, r18
 23e:	61 83       	std	Z+1, r22	; 0x01
 240:	08 95       	ret

00000242 <TC0_EnableCCChannels>:
 242:	fc 01       	movw	r30, r24
 244:	21 81       	ldd	r18, Z+1	; 0x01
 246:	60 7f       	andi	r22, 0xF0	; 240
 248:	62 2b       	or	r22, r18
 24a:	61 83       	std	Z+1, r22	; 0x01
 24c:	08 95       	ret

0000024e <send_high>:
	int i;
	for (i=0; 8 > i ;++i) {
		if (bits & (mask << i)) send_high();
		else send_low();
	}
}
 24e:	82 e4       	ldi	r24, 0x42	; 66
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	e0 e0       	ldi	r30, 0x00	; 0
 254:	f9 e0       	ldi	r31, 0x09	; 9
 256:	80 af       	std	Z+56, r24	; 0x38
 258:	91 af       	std	Z+57, r25	; 0x39
 25a:	8c e2       	ldi	r24, 0x2C	; 44
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	31 e0       	ldi	r19, 0x01	; 1
 260:	34 87       	std	Z+12, r19	; 0x0c
 262:	24 85       	ldd	r18, Z+12	; 0x0c
 264:	20 ff       	sbrs	r18, 0
 266:	fd cf       	rjmp	.-6      	; 0x262 <send_high+0x14>
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	d1 f7       	brne	.-12     	; 0x260 <send_high+0x12>
 26c:	08 95       	ret

0000026e <send_low>:
 26e:	e0 e0       	ldi	r30, 0x00	; 0
 270:	f9 e0       	ldi	r31, 0x09	; 9
 272:	10 ae       	std	Z+56, r1	; 0x38
 274:	11 ae       	std	Z+57, r1	; 0x39
 276:	8c e2       	ldi	r24, 0x2C	; 44
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	31 e0       	ldi	r19, 0x01	; 1
 27c:	34 87       	std	Z+12, r19	; 0x0c
 27e:	24 85       	ldd	r18, Z+12	; 0x0c
 280:	20 ff       	sbrs	r18, 0
 282:	fd cf       	rjmp	.-6      	; 0x27e <send_low+0x10>
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	d1 f7       	brne	.-12     	; 0x27c <send_low+0xe>
 288:	08 95       	ret

0000028a <send_high_manchester>:


void send_high_manchester ( ) {
	send_low();
 28a:	f1 df       	rcall	.-30     	; 0x26e <send_low>
	send_high();
 28c:	e0 cf       	rjmp	.-64     	; 0x24e <send_high>

0000028e <send_low_manchester>:
}


void send_low_manchester ( ) {
	send_high();
 28e:	df df       	rcall	.-66     	; 0x24e <send_high>
	send_low();
 290:	ee cf       	rjmp	.-36     	; 0x26e <send_low>

00000292 <send_byte_manchester>:
}


void send_byte_manchester ( const unsigned char bits ) {
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
		if (bits & (mask << i)) send_high_manchester();
 2a2:	ee 24       	eor	r14, r14
 2a4:	e3 94       	inc	r14
 2a6:	f1 2c       	mov	r15, r1
 2a8:	08 2f       	mov	r16, r24
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	97 01       	movw	r18, r14
 2ae:	0c 2e       	mov	r0, r28
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <send_byte_manchester+0x24>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <send_byte_manchester+0x20>
 2ba:	20 23       	and	r18, r16
 2bc:	31 23       	and	r19, r17
 2be:	23 2b       	or	r18, r19
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <send_byte_manchester+0x34>
 2c2:	e3 df       	rcall	.-58     	; 0x28a <send_high_manchester>
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <send_byte_manchester+0x36>
		else send_low_manchester();
 2c6:	e3 df       	rcall	.-58     	; 0x28e <send_low_manchester>


void send_byte_manchester ( const unsigned char bits ) {
	unsigned char mask = 0x01;
	int i;
	for (i=0; 8 > i ;++i) {
 2c8:	21 96       	adiw	r28, 0x01	; 1
 2ca:	c8 30       	cpi	r28, 0x08	; 8
 2cc:	d1 05       	cpc	r29, r1
 2ce:	71 f7       	brne	.-36     	; 0x2ac <send_byte_manchester+0x1a>
		if (bits & (mask << i)) send_high_manchester();
		else send_low_manchester();
	}
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	08 95       	ret

000002de <main>:
	
	
	/* Comment out the 3 lines below if you want to use
	   your own pull-up resistors (I recommend using 4.7k).
	*/
	PORTCFG.MPCMASK = 0x03;                                     // Configure several PINxCTRL registers.
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	80 93 b0 00 	sts	0x00B0, r24
	PORTC.PIN0CTRL =\
		(PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;   // Use the internal pull-up resistors on PORTC's TWI Ports.
 2e4:	e0 e4       	ldi	r30, 0x40	; 64
 2e6:	f6 e0       	ldi	r31, 0x06	; 6
 2e8:	80 89       	ldd	r24, Z+16	; 0x10
	
	/* Comment out the 3 lines below if you want to use
	   your own pull-up resistors (I recommend using 4.7k).
	*/
	PORTCFG.MPCMASK = 0x03;                                     // Configure several PINxCTRL registers.
	PORTC.PIN0CTRL =\
 2ea:	87 7c       	andi	r24, 0xC7	; 199
 2ec:	88 61       	ori	r24, 0x18	; 24
 2ee:	80 8b       	std	Z+16, r24	; 0x10
		(PORTC.PIN0CTRL & ~PORT_OPC_gm) | PORT_OPC_PULLUP_gc;   // Use the internal pull-up resistors on PORTC's TWI Ports.

	TWI_MasterInit(
 2f0:	25 e0       	ldi	r18, 0x05	; 5
 2f2:	40 e4       	ldi	r20, 0x40	; 64
 2f4:	60 e8       	ldi	r22, 0x80	; 128
 2f6:	74 e0       	ldi	r23, 0x04	; 4
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e2       	ldi	r25, 0x20	; 32
 2fc:	7d d0       	rcall	.+250    	; 0x3f8 <TWI_MasterInit>
		&TWIC,
		TWI_MASTER_INTLVL_LO_gc,
		TWI_BAUDSETTING
	);

	PMIC.CTRL |= PMIC_LOLVLEN_bm;                               // Enable LO interrupt level.
 2fe:	e0 ea       	ldi	r30, 0xA0	; 160
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	82 81       	ldd	r24, Z+2	; 0x02
 304:	81 60       	ori	r24, 0x01	; 1
 306:	82 83       	std	Z+2, r24	; 0x02
	sei();                                                      // Enable interrupts.
 308:	78 94       	sei
	
	PORTD.DIR = 0x01;                                           // Enable output on PortD0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 60 06 	sts	0x0660, r24
	
	TC0_ConfigWGM(&TCD0,TC_WGMODE_SS_gc);                       // Configure single slope mode.
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	99 e0       	ldi	r25, 0x09	; 9
 316:	8f df       	rcall	.-226    	; 0x236 <TC0_ConfigWGM>
	TC0_EnableCCChannels(&TCD0,TC0_CCAEN_bm);                   // Enable compare channel A.
 318:	60 e1       	ldi	r22, 0x10	; 16
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	99 e0       	ldi	r25, 0x09	; 9
 31e:	91 df       	rcall	.-222    	; 0x242 <TC0_EnableCCChannels>
	TC0_ConfigClockSource(&TCD0,TC_CLKSEL_DIV1_gc);             // Start the timer by setting a clock source.
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	99 e0       	ldi	r25, 0x09	; 9
 326:	81 df       	rcall	.-254    	; 0x22a <TC0_ConfigClockSource>
	
	TC_SetPeriod(&TCD0,TIMER_PERIOD);
 328:	e0 e0       	ldi	r30, 0x00	; 0
 32a:	f9 e0       	ldi	r31, 0x09	; 9
 32c:	85 e8       	ldi	r24, 0x85	; 133
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	86 a3       	std	Z+38, r24	; 0x26
 332:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetCompareA(&TCD0,TIMER_PERIOD/2);
 334:	82 e4       	ldi	r24, 0x42	; 66
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	80 af       	std	Z+56, r24	; 0x38
 33a:	91 af       	std	Z+57, r25	; 0x39
	*/
	int i;//, j;

	// Clear input stream to iPhone then send start edge
	for (i = 0; i < 3; i++) {
		send_low();		
 33c:	98 df       	rcall	.-208    	; 0x26e <send_low>
 33e:	97 df       	rcall	.-210    	; 0x26e <send_low>
 340:	96 df       	rcall	.-212    	; 0x26e <send_low>
	}
	send_high();
 342:	85 df       	rcall	.-246    	; 0x24e <send_high>
		for (i=TWIM_READ_BUFFER_SIZE-1; 0 <= i ;--i) {          // Iterate through the results.
			send_byte_manchester(twiMaster.readData[i]);        // Send the data using Manchester encoding.
		}
		/ **/
		
		send_byte_manchester(0xCA);
 344:	8a ec       	ldi	r24, 0xCA	; 202
 346:	a5 df       	rcall	.-182    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0xFE);
 348:	8e ef       	ldi	r24, 0xFE	; 254
 34a:	a3 df       	rcall	.-186    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0xBA);
 34c:	8a eb       	ldi	r24, 0xBA	; 186
 34e:	a1 df       	rcall	.-190    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0xBE);
 350:	8e eb       	ldi	r24, 0xBE	; 190
 352:	9f df       	rcall	.-194    	; 0x292 <send_byte_manchester>
		
		send_byte_manchester(0xDE);
 354:	8e ed       	ldi	r24, 0xDE	; 222
 356:	9d df       	rcall	.-198    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0xAD);
 358:	8d ea       	ldi	r24, 0xAD	; 173
 35a:	9b df       	rcall	.-202    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0xBE);
 35c:	8e eb       	ldi	r24, 0xBE	; 190
 35e:	99 df       	rcall	.-206    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0xEF);
 360:	8f ee       	ldi	r24, 0xEF	; 239
 362:	97 df       	rcall	.-210    	; 0x292 <send_byte_manchester>
		
		send_byte_manchester(0xFA);
 364:	8a ef       	ldi	r24, 0xFA	; 250
 366:	95 df       	rcall	.-214    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0xCC);
 368:	8c ec       	ldi	r24, 0xCC	; 204
 36a:	93 df       	rcall	.-218    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0x31);
 36c:	81 e3       	ldi	r24, 0x31	; 49
 36e:	91 df       	rcall	.-222    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0x04);
 370:	84 e0       	ldi	r24, 0x04	; 4
 372:	8f df       	rcall	.-226    	; 0x292 <send_byte_manchester>
		
		send_byte_manchester(0x00);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	8d df       	rcall	.-230    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0x10);
 378:	80 e1       	ldi	r24, 0x10	; 16
 37a:	8b df       	rcall	.-234    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0x47);
 37c:	87 e4       	ldi	r24, 0x47	; 71
 37e:	89 df       	rcall	.-238    	; 0x292 <send_byte_manchester>
		send_byte_manchester(0x13);
 380:	83 e1       	ldi	r24, 0x13	; 19
 382:	87 df       	rcall	.-242    	; 0x292 <send_byte_manchester>
		
		
		
		// Clear input buffer to iPhone with
		for (i = 0; i < 3; i++) {
			send_low();
 384:	74 df       	rcall	.-280    	; 0x26e <send_low>
 386:	73 df       	rcall	.-282    	; 0x26e <send_low>
 388:	72 df       	rcall	.-284    	; 0x26e <send_low>
		}
	//}
}
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	08 95       	ret

00000390 <__vector_13>:


/*! TWIC Master Interrupt vector. */
ISR(TWIC_TWIM_vect){
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	08 b6       	in	r0, 0x38	; 56
 39c:	0f 92       	push	r0
 39e:	18 be       	out	0x38, r1	; 56
 3a0:	09 b6       	in	r0, 0x39	; 57
 3a2:	0f 92       	push	r0
 3a4:	19 be       	out	0x39, r1	; 57
 3a6:	0b b6       	in	r0, 0x3b	; 59
 3a8:	0f 92       	push	r0
 3aa:	1b be       	out	0x3b, r1	; 59
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e2       	ldi	r25, 0x20	; 32
 3c8:	a3 d0       	rcall	.+326    	; 0x510 <TWI_MasterInterruptHandler>
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0b be       	out	0x3b, r0	; 59
 3e6:	0f 90       	pop	r0
 3e8:	09 be       	out	0x39, r0	; 57
 3ea:	0f 90       	pop	r0
 3ec:	08 be       	out	0x38, r0	; 56
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <TWI_MasterInit>:
 3f8:	fc 01       	movw	r30, r24
 3fa:	60 83       	st	Z, r22
 3fc:	71 83       	std	Z+1, r23	; 0x01
 3fe:	48 63       	ori	r20, 0x38	; 56
 400:	db 01       	movw	r26, r22
 402:	11 96       	adiw	r26, 0x01	; 1
 404:	4c 93       	st	X, r20
 406:	a0 81       	ld	r26, Z
 408:	b1 81       	ldd	r27, Z+1	; 0x01
 40a:	15 96       	adiw	r26, 0x05	; 5
 40c:	2c 93       	st	X, r18
 40e:	01 90       	ld	r0, Z+
 410:	f0 81       	ld	r31, Z
 412:	e0 2d       	mov	r30, r0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	84 83       	std	Z+4, r24	; 0x04
 418:	08 95       	ret

0000041a <TWI_MasterArbitrationLostBusErrorHandler>:
 41a:	fc 01       	movw	r30, r24
 41c:	a0 81       	ld	r26, Z
 41e:	b1 81       	ldd	r27, Z+1	; 0x01
 420:	14 96       	adiw	r26, 0x04	; 4
 422:	8c 91       	ld	r24, X
 424:	14 97       	sbiw	r26, 0x04	; 4
 426:	82 ff       	sbrs	r24, 2
 428:	03 c0       	rjmp	.+6      	; 0x430 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
 42a:	94 e0       	ldi	r25, 0x04	; 4
 42c:	94 8b       	std	Z+20, r25	; 0x14
 42e:	02 c0       	rjmp	.+4      	; 0x434 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
 430:	93 e0       	ldi	r25, 0x03	; 3
 432:	94 8b       	std	Z+20, r25	; 0x14
 434:	88 60       	ori	r24, 0x08	; 8
 436:	14 96       	adiw	r26, 0x04	; 4
 438:	8c 93       	st	X, r24
 43a:	13 8a       	std	Z+19, r1	; 0x13
 43c:	08 95       	ret

0000043e <TWI_MasterTransactionFinished>:
 43e:	fc 01       	movw	r30, r24
 440:	64 8b       	std	Z+20, r22	; 0x14
 442:	13 8a       	std	Z+19, r1	; 0x13
 444:	08 95       	ret

00000446 <TWI_MasterReadHandler>:
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
 44c:	8a 89       	ldd	r24, Y+18	; 0x12
 44e:	84 30       	cpi	r24, 0x04	; 4
 450:	98 f4       	brcc	.+38     	; 0x478 <TWI_MasterReadHandler+0x32>
 452:	e0 e4       	ldi	r30, 0x40	; 64
 454:	f6 e0       	ldi	r31, 0x06	; 6
 456:	80 81       	ld	r24, Z
 458:	10 82       	st	Z, r1
 45a:	a8 81       	ld	r26, Y
 45c:	b9 81       	ldd	r27, Y+1	; 0x01
 45e:	17 96       	adiw	r26, 0x07	; 7
 460:	9c 91       	ld	r25, X
 462:	2a 89       	ldd	r18, Y+18	; 0x12
 464:	de 01       	movw	r26, r28
 466:	a2 0f       	add	r26, r18
 468:	b1 1d       	adc	r27, r1
 46a:	1b 96       	adiw	r26, 0x0b	; 11
 46c:	9c 93       	st	X, r25
 46e:	9a 89       	ldd	r25, Y+18	; 0x12
 470:	9f 5f       	subi	r25, 0xFF	; 255
 472:	9a 8b       	std	Y+18, r25	; 0x12
 474:	80 83       	st	Z, r24
 476:	07 c0       	rjmp	.+14     	; 0x486 <TWI_MasterReadHandler+0x40>
 478:	e8 81       	ld	r30, Y
 47a:	f9 81       	ldd	r31, Y+1	; 0x01
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	83 83       	std	Z+3, r24	; 0x03
 480:	62 e0       	ldi	r22, 0x02	; 2
 482:	ce 01       	movw	r24, r28
 484:	dc df       	rcall	.-72     	; 0x43e <TWI_MasterTransactionFinished>
 486:	98 89       	ldd	r25, Y+16	; 0x10
 488:	8a 89       	ldd	r24, Y+18	; 0x12
 48a:	89 17       	cp	r24, r25
 48c:	28 f4       	brcc	.+10     	; 0x498 <TWI_MasterReadHandler+0x52>
 48e:	e8 81       	ld	r30, Y
 490:	f9 81       	ldd	r31, Y+1	; 0x01
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	83 83       	std	Z+3, r24	; 0x03
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <TWI_MasterReadHandler+0x60>
 498:	e8 81       	ld	r30, Y
 49a:	f9 81       	ldd	r31, Y+1	; 0x01
 49c:	87 e0       	ldi	r24, 0x07	; 7
 49e:	83 83       	std	Z+3, r24	; 0x03
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	ce 01       	movw	r24, r28
 4a4:	cc df       	rcall	.-104    	; 0x43e <TWI_MasterTransactionFinished>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <TWI_MasterWriteHandler>:
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	fc 01       	movw	r30, r24
 4b2:	97 85       	ldd	r25, Z+15	; 0x0f
 4b4:	20 89       	ldd	r18, Z+16	; 0x10
 4b6:	a0 81       	ld	r26, Z
 4b8:	b1 81       	ldd	r27, Z+1	; 0x01
 4ba:	14 96       	adiw	r26, 0x04	; 4
 4bc:	8c 91       	ld	r24, X
 4be:	14 97       	sbiw	r26, 0x04	; 4
 4c0:	84 ff       	sbrs	r24, 4
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <TWI_MasterWriteHandler+0x26>
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	13 96       	adiw	r26, 0x03	; 3
 4c8:	8c 93       	st	X, r24
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	84 8b       	std	Z+20, r24	; 0x14
 4ce:	13 8a       	std	Z+19, r1	; 0x13
 4d0:	1c c0       	rjmp	.+56     	; 0x50a <TWI_MasterWriteHandler+0x5e>
 4d2:	81 89       	ldd	r24, Z+17	; 0x11
 4d4:	89 17       	cp	r24, r25
 4d6:	58 f4       	brcc	.+22     	; 0x4ee <TWI_MasterWriteHandler+0x42>
 4d8:	81 89       	ldd	r24, Z+17	; 0x11
 4da:	ef 01       	movw	r28, r30
 4dc:	c8 0f       	add	r28, r24
 4de:	d1 1d       	adc	r29, r1
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	17 96       	adiw	r26, 0x07	; 7
 4e4:	8c 93       	st	X, r24
 4e6:	81 89       	ldd	r24, Z+17	; 0x11
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	81 8b       	std	Z+17, r24	; 0x11
 4ec:	0e c0       	rjmp	.+28     	; 0x50a <TWI_MasterWriteHandler+0x5e>
 4ee:	82 89       	ldd	r24, Z+18	; 0x12
 4f0:	82 17       	cp	r24, r18
 4f2:	28 f4       	brcc	.+10     	; 0x4fe <TWI_MasterWriteHandler+0x52>
 4f4:	82 81       	ldd	r24, Z+2	; 0x02
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	16 96       	adiw	r26, 0x06	; 6
 4fa:	8c 93       	st	X, r24
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <TWI_MasterWriteHandler+0x5e>
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	13 96       	adiw	r26, 0x03	; 3
 502:	8c 93       	st	X, r24
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	cf 01       	movw	r24, r30
 508:	9a df       	rcall	.-204    	; 0x43e <TWI_MasterTransactionFinished>
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <TWI_MasterInterruptHandler>:
 510:	dc 01       	movw	r26, r24
 512:	ed 91       	ld	r30, X+
 514:	fc 91       	ld	r31, X
 516:	24 81       	ldd	r18, Z+4	; 0x04
 518:	32 2f       	mov	r19, r18
 51a:	3c 70       	andi	r19, 0x0C	; 12
 51c:	09 f0       	breq	.+2      	; 0x520 <TWI_MasterInterruptHandler+0x10>
 51e:	7d cf       	rjmp	.-262    	; 0x41a <TWI_MasterArbitrationLostBusErrorHandler>
 520:	26 ff       	sbrs	r18, 6
 522:	01 c0       	rjmp	.+2      	; 0x526 <TWI_MasterInterruptHandler+0x16>
 524:	c3 cf       	rjmp	.-122    	; 0x4ac <TWI_MasterWriteHandler>
 526:	22 23       	and	r18, r18
 528:	0c f4       	brge	.+2      	; 0x52c <TWI_MasterInterruptHandler+0x1c>
 52a:	8d cf       	rjmp	.-230    	; 0x446 <TWI_MasterReadHandler>
 52c:	66 e0       	ldi	r22, 0x06	; 6
 52e:	87 cf       	rjmp	.-242    	; 0x43e <TWI_MasterTransactionFinished>

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
